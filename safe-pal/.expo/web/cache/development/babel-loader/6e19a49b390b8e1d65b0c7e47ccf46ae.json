{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"color\", \"size\", \"accessibilityLabel\", \"disabled\", \"onPress\", \"theme\", \"style\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport TouchableRipple from \"./TouchableRipple\";\nimport Icon from \"./Icon\";\nimport { withTheme } from \"../core/theming\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar IconButton = function IconButton(_ref) {\n  var icon = _ref.icon,\n      customColor = _ref.color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      accessibilityLabel = _ref.accessibilityLabel,\n      disabled = _ref.disabled,\n      onPress = _ref.onPress,\n      theme = _ref.theme,\n      style = _ref.style,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var iconColor = typeof customColor !== 'undefined' ? customColor : theme.colors.text;\n  var rippleColor = color(iconColor).alpha(0.32).rgb().string();\n  return _jsx(TouchableRipple, _objectSpread(_objectSpread({\n    borderless: true,\n    onPress: onPress,\n    rippleColor: rippleColor,\n    style: [styles.container, disabled && styles.disabled, style],\n    accessibilityLabel: accessibilityLabel,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityStates: disabled ? ['disabled'] : undefined,\n    disabled: disabled,\n    hitSlop: TouchableRipple.supported ? {\n      top: 10,\n      left: 10,\n      bottom: 10,\n      right: 10\n    } : {\n      top: 6,\n      left: 6,\n      bottom: 6,\n      right: 6\n    }\n  }, rest), {}, {\n    children: _jsx(View, {\n      children: _jsx(Icon, {\n        color: iconColor,\n        source: icon,\n        size: size\n      })\n    })\n  }));\n};\n\nvar styles = StyleSheet.create({\n  container: TouchableRipple.supported ? {\n    height: 28,\n    width: 28,\n    margin: 10,\n    alignItems: 'center',\n    justifyContent: 'center'\n  } : {\n    borderRadius: 36 / 2,\n    height: 36,\n    width: 36,\n    margin: 6,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  disabled: {\n    opacity: 0.32\n  }\n});\nexport default withTheme(IconButton);","map":{"version":3,"sources":["C:/projectpog/2022-ca326-travel-guide/MapDisplay/node_modules/react-native-paper/src/components/IconButton.js"],"names":["React","color","TouchableRipple","Icon","withTheme","IconButton","icon","customColor","size","accessibilityLabel","disabled","onPress","theme","style","rest","iconColor","colors","text","rippleColor","alpha","rgb","string","styles","container","undefined","supported","top","left","bottom","right","StyleSheet","create","height","width","margin","alignItems","justifyContent","borderRadius","opacity"],"mappings":";;;;;;;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,eAAP;AACA,OAAOC,IAAP;AACA,SAASC,SAAT;;;AAmEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAUN;AAAA,MATXC,IASW,QATXA,IASW;AAAA,MARJC,WAQI,QARXN,KAQW;AAAA,uBAPXO,IAOW;AAAA,MAPXA,IAOW,0BAPJ,EAOI;AAAA,MANXC,kBAMW,QANXA,kBAMW;AAAA,MALXC,QAKW,QALXA,QAKW;AAAA,MAJXC,OAIW,QAJXA,OAIW;AAAA,MAHXC,KAGW,QAHXA,KAGW;AAAA,MAFXC,KAEW,QAFXA,KAEW;AAAA,MADRC,IACQ;;AACX,MAAMC,SAAS,GACb,OAAOR,WAAP,KAAuB,WAAvB,GAAqCA,WAArC,GAAmDK,KAAK,CAACI,MAAN,CAAaC,IADlE;AAEA,MAAMC,WAAW,GAAGjB,KAAK,CAACc,SAAD,CAAL,CACjBI,KADiB,CACX,IADW,EAEjBC,GAFiB,GAGjBC,MAHiB,EAApB;AAKA,SACE,KAAC,eAAD;AACE,IAAA,UAAU,MADZ;AAEE,IAAA,OAAO,EAAEV,OAFX;AAGE,IAAA,WAAW,EAAEO,WAHf;AAIE,IAAA,KAAK,EAAE,CAACI,MAAM,CAACC,SAAR,EAAmBb,QAAQ,IAAIY,MAAM,CAACZ,QAAtC,EAAgDG,KAAhD,CAJT;AAKE,IAAA,kBAAkB,EAAEJ,kBALtB;AAME,IAAA,mBAAmB,EAAEC,QAAQ,GAAG,CAAC,QAAD,EAAW,UAAX,CAAH,GAA4B,QAN3D;AAOE,IAAA,0BAA0B,EAAC,QAP7B;AAQE,IAAA,iBAAiB,EAAC,QARpB;AASE,IAAA,mBAAmB,EAAEA,QAAQ,GAAG,CAAC,UAAD,CAAH,GAAkBc,SATjD;AAUE,IAAA,QAAQ,EAAEd,QAVZ;AAWE,IAAA,OAAO,EACLR,eAAe,CAACuB,SAAhB,GACI;AAAEC,MAAAA,GAAG,EAAE,EAAP;AAAWC,MAAAA,IAAI,EAAE,EAAjB;AAAqBC,MAAAA,MAAM,EAAE,EAA7B;AAAiCC,MAAAA,KAAK,EAAE;AAAxC,KADJ,GAEI;AAAEH,MAAAA,GAAG,EAAE,CAAP;AAAUC,MAAAA,IAAI,EAAE,CAAhB;AAAmBC,MAAAA,MAAM,EAAE,CAA3B;AAA8BC,MAAAA,KAAK,EAAE;AAArC;AAdR,KAgBMf,IAhBN;AAAA,cAkBE,KAAC,IAAD;AAAA,gBACE,KAAC,IAAD;AAAM,QAAA,KAAK,EAAEC,SAAb;AAAwB,QAAA,MAAM,EAAET,IAAhC;AAAsC,QAAA,IAAI,EAAEE;AAA5C;AADF;AAlBF,KADF;AAwBD,CA1CD;;AA4CA,IAAMc,MAAM,GAAGQ,UAAU,CAACC,MAAX,CAAkB;AAC/BR,EAAAA,SAAS,EAAErB,eAAe,CAACuB,SAAhB,GACP;AACEO,IAAAA,MAAM,EAAE,EADV;AAEEC,IAAAA,KAAK,EAAE,EAFT;AAGEC,IAAAA,MAAM,EAAE,EAHV;AAIEC,IAAAA,UAAU,EAAE,QAJd;AAKEC,IAAAA,cAAc,EAAE;AALlB,GADO,GAQP;AACEC,IAAAA,YAAY,EAAE,KAAK,CADrB;AAEEL,IAAAA,MAAM,EAAE,EAFV;AAGEC,IAAAA,KAAK,EAAE,EAHT;AAIEC,IAAAA,MAAM,EAAE,CAJV;AAKEC,IAAAA,UAAU,EAAE,QALd;AAMEC,IAAAA,cAAc,EAAE;AANlB,GAT2B;AAiB/B1B,EAAAA,QAAQ,EAAE;AACR4B,IAAAA,OAAO,EAAE;AADD;AAjBqB,CAAlB,CAAf;AAsBA,eAAelC,SAAS,CAACC,UAAD,CAAxB","sourcesContent":["/* @flow */\r\n\r\nimport * as React from 'react';\r\nimport { View, StyleSheet } from 'react-native';\r\nimport color from 'color';\r\n\r\nimport TouchableRipple from './TouchableRipple';\r\nimport Icon from './Icon';\r\nimport { withTheme } from '../core/theming';\r\nimport type { IconSource } from './Icon';\r\nimport type { Theme } from '../../types';\r\n\r\ntype Props = {\r\n  /**\r\n   * Icon to display.\r\n   */\r\n  icon: IconSource,\r\n  /**\r\n   * Color of the icon.\r\n   */\r\n  color?: string,\r\n  /**\r\n   * Size of the icon.\r\n   */\r\n  size?: number,\r\n  /**\r\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\r\n   */\r\n  disabled?: boolean,\r\n  /**\r\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\r\n   */\r\n  accessibilityLabel?: string,\r\n  /**\r\n   * Function to execute on press.\r\n   */\r\n  onPress?: () => mixed,\r\n  style?: any,\r\n  /**\r\n   * @optional\r\n   */\r\n  theme: Theme,\r\n};\r\n\r\n/**\r\n * An icon button is a button which displays only an icon without a label.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <figure>\r\n *     <img src=\"screenshots/icon-button-1.png\" />\r\n *     <figcaption>Icon button</figcaption>\r\n *   </figure>\r\n *   <figure>\r\n *     <img src=\"screenshots/icon-button-2.png\" />\r\n *     <figcaption>Pressed icon button</figcaption>\r\n *   </figure>\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { IconButton, Colors } from 'react-native-paper';\r\n *\r\n * const MyComponent = () => (\r\n *   <IconButton\r\n *     icon=\"add-a-photo\"\r\n *     color={Colors.red500}\r\n *     size={20}\r\n *     onPress={() => console.log('Pressed')}\r\n *   />\r\n * );\r\n *\r\n * export default MyComponent;\r\n * ```\r\n */\r\nconst IconButton = ({\r\n  icon,\r\n  color: customColor,\r\n  size = 24,\r\n  accessibilityLabel,\r\n  disabled,\r\n  onPress,\r\n  theme,\r\n  style,\r\n  ...rest\r\n}: Props) => {\r\n  const iconColor =\r\n    typeof customColor !== 'undefined' ? customColor : theme.colors.text;\r\n  const rippleColor = color(iconColor)\r\n    .alpha(0.32)\r\n    .rgb()\r\n    .string();\r\n\r\n  return (\r\n    <TouchableRipple\r\n      borderless\r\n      onPress={onPress}\r\n      rippleColor={rippleColor}\r\n      style={[styles.container, disabled && styles.disabled, style]}\r\n      accessibilityLabel={accessibilityLabel}\r\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\r\n      accessibilityComponentType=\"button\"\r\n      accessibilityRole=\"button\"\r\n      accessibilityStates={disabled ? ['disabled'] : undefined}\r\n      disabled={disabled}\r\n      hitSlop={\r\n        TouchableRipple.supported\r\n          ? { top: 10, left: 10, bottom: 10, right: 10 }\r\n          : { top: 6, left: 6, bottom: 6, right: 6 }\r\n      }\r\n      {...rest}\r\n    >\r\n      <View>\r\n        <Icon color={iconColor} source={icon} size={size} />\r\n      </View>\r\n    </TouchableRipple>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: TouchableRipple.supported\r\n    ? {\r\n        height: 28,\r\n        width: 28,\r\n        margin: 10,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n      }\r\n    : {\r\n        borderRadius: 36 / 2,\r\n        height: 36,\r\n        width: 36,\r\n        margin: 6,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n      },\r\n  disabled: {\r\n    opacity: 0.32,\r\n  },\r\n});\r\n\r\nexport default withTheme(IconButton);\r\n"]},"metadata":{},"sourceType":"module"}