{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { Input } from 'react-native-elements';\nimport { auth, realtimeDatabase } from \"../firebase\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function RegisterScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      userEmail = _useState2[0],\n      setUserEmail = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      name = _useState4[0],\n      setName = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      userPassword = _useState6[0],\n      setUserPassword = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      confirmPassword = _useState8[0],\n      setConfirmPassword = _useState8[1];\n\n  var colors = ['blue', 'green', 'purple', 'teal', 'indigo', 'aqua', '#000000', '#ff69b4'];\n\n  function register() {\n    auth.createUserWithEmailAndPassword(userEmail, userPassword).then(function (userCredential) {\n      var user = userCredential.user;\n      user.updateProfile({\n        displayName: name\n      }).then(function () {\n        realtimeDatabase.ref(\"users\").child(name).set([auth.currentUser.uid]);\n        realtimeDatabase.ref(\"users\").child(name).child(\"alertStatus\").set(\"#daa520\");\n        realtimeDatabase.ref(\"users\").child(name).child(\"friendRequests\").child(\"received\").set(\"\");\n      }).catch(function (error) {\n        return alert(error.message);\n      });\n      navigation.popToTop();\n    }).catch(function (error) {\n      return alert(error.message);\n    });\n  }\n\n  function checkNameExist() {\n    realtimeDatabase.ref(\"users\").once(\"value\", function (snapshot) {\n      var checker = false;\n      snapshot.forEach(function (child) {\n        if (child.key.toLowerCase() === name.toLowerCase()) {\n          checker = true;\n        }\n      });\n\n      if (checker === false) {\n        if (userPassword === confirmPassword) {\n          register();\n        } else {\n          alert(\"Please make sure that userPasswords match.\");\n        }\n      } else {\n        return alert(\"User name already exists\");\n      }\n    });\n  }\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Image, {\n      style: styles.Logo,\n      source: require('C:/projectpog/2022-ca326-travel-guide/MapDisplay/images/SAFEPAL1.png')\n    }), _jsx(Input, {\n      placeholder: \"Enter new username\",\n      label: \"User Name\",\n      leftIcon: {\n        type: 'material',\n        name: 'badge'\n      },\n      value: name,\n      onChangeText: function onChangeText(text) {\n        return setName(text);\n      }\n    }), _jsx(Input, {\n      placeholder: \"Enter your userEmail\",\n      label: \"Email\",\n      leftIcon: {\n        type: 'material',\n        name: 'userEmail'\n      },\n      value: userEmail,\n      onChangeText: function onChangeText(text) {\n        return setUserEmail(text);\n      }\n    }), _jsx(Input, {\n      placeholder: \"Enter your userPassword\",\n      label: \"Password\",\n      leftIcon: {\n        type: 'material',\n        name: 'lock'\n      },\n      value: userPassword,\n      onChangeText: function onChangeText(text) {\n        return setUserPassword(text);\n      },\n      secureTextEntry: true\n    }), _jsx(Input, {\n      placeholder: \"Confirm userPassword\",\n      label: \"Confirm Password\",\n      leftIcon: {\n        type: 'material',\n        name: 'lock'\n      },\n      value: confirmPassword,\n      onChangeText: function onChangeText(text) {\n        return setConfirmPassword(text);\n      },\n      secureTextEntry: true\n    }), _jsx(TouchableOpacity, {\n      title: \"Register\",\n      onPress: checkNameExist,\n      style: styles.button,\n      children: _jsx(Text, {\n        style: styles.texts,\n        children: \"Register\"\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  Logo: {\n    width: 250,\n    height: 250,\n    marginBottom: 30\n  },\n  texts: {\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    color: 'black',\n    fontSize: 20\n  },\n  button: {\n    backgroundColor: '#daa520',\n    height: 50,\n    width: 200,\n    marginTop: 10,\n    borderRadius: 15,\n    borderWidth: 5,\n    justifyContent: \"center\",\n    alignItems: 'center'\n  },\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    padding: 10\n  }\n});","map":{"version":3,"sources":["C:/projectpog/2022-ca326-travel-guide/MapDisplay/screens/RegisterScreen.js"],"names":["React","useState","Input","auth","realtimeDatabase","RegisterScreen","navigation","userEmail","setUserEmail","name","setName","userPassword","setUserPassword","confirmPassword","setConfirmPassword","colors","register","createUserWithEmailAndPassword","then","userCredential","user","updateProfile","displayName","ref","child","set","currentUser","uid","catch","error","alert","message","popToTop","checkNameExist","once","snapshot","checker","forEach","key","toLowerCase","styles","container","Logo","require","type","text","button","texts","StyleSheet","create","width","height","marginBottom","justifyContent","alignItems","color","fontSize","backgroundColor","marginTop","borderRadius","borderWidth","flex","padding"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport {View, StyleSheet, TouchableOpacity, Text, Image} from 'react-native';\r\nimport{Input} from 'react-native-elements';\r\nimport {auth, realtimeDatabase} from \"../firebase\";\r\n\r\n//Functional component which will register a new user\r\nexport function RegisterScreen({navigation}) {\r\n    //Declaring necesarry states\r\n    const [userEmail, setUserEmail] = useState(\"\");\r\n    const [name, setName] = useState(\"\");\r\n    const [userPassword, setUserPassword] = useState(\"\");\r\n    const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n    const colors = ['blue', 'green', 'purple', 'teal', 'indigo', 'aqua', '#000000', '#ff69b4']\r\n\r\n    //Function which will register a new user to the firebase authentication system\r\n    function register() {\r\n        auth.createUserWithEmailAndPassword(userEmail, userPassword).then((userCredential) => {\r\n            var user = userCredential.user;\r\n            //Creates new user credentials\r\n            user.updateProfile({\r\n                displayName: name,\r\n            }).then(() => {\r\n                    //Creates necessary firebase node relative to the new user\r\n                    realtimeDatabase.ref(\"users\").child(name).set([auth.currentUser.uid]);\r\n                    realtimeDatabase.ref(\"users\").child(name).child(\"alertStatus\").set(\"#daa520\");\r\n                    realtimeDatabase.ref(\"users\").child(name).child(\"friendRequests\").child(\"received\").set(\"\");\r\n\r\n                }).catch(error => alert(error.message))\r\n            navigation.popToTop();\r\n        }).catch((error) => alert(error.message))\r\n    }\r\n\r\n\r\n    //Function which will check that the user trying to register is inputting correct details\r\n    function checkNameExist() {\r\n        realtimeDatabase.ref(\"users\").once(\"value\", function(snapshot) {\r\n            let checker = false\r\n            snapshot.forEach(child => {\r\n                //Checks if new username does not already exist within the database\r\n                if (child.key.toLowerCase() === name.toLowerCase()) {\r\n                    checker = true\r\n                }\r\n            })\r\n            if (checker === false) {\r\n                //Checks if both password input fields were the same\r\n                if (userPassword === confirmPassword) {\r\n                    register();\r\n                }\r\n    \r\n                else {\r\n                    alert(\"Please make sure that userPasswords match.\")\r\n                }\r\n            }\r\n    \r\n            else {\r\n                return alert(\"User name already exists\")\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <Image\r\n                style={styles.Logo}\r\n                source={require('C:/projectpog/2022-ca326-travel-guide/MapDisplay/images/SAFEPAL1.png')}\r\n            />\r\n            <Input\r\n                placeholder=\"Enter new username\"\r\n                label=\"User Name\"\r\n                leftIcon={{type: 'material', name: 'badge'}}\r\n                value={name}\r\n                onChangeText={text=> setName(text)}\r\n            />\r\n\r\n            <Input\r\n                placeholder=\"Enter your userEmail\"\r\n                label=\"Email\"\r\n                leftIcon={{type: 'material', name: 'userEmail'}}\r\n                value={userEmail}\r\n                onChangeText={text=> setUserEmail(text)}\r\n            />\r\n\r\n            <Input\r\n                placeholder=\"Enter your userPassword\"\r\n                label=\"Password\"\r\n                leftIcon={{type: 'material', name: 'lock'}}\r\n                value={userPassword}\r\n                onChangeText={text=> setUserPassword(text)}\r\n                secureTextEntry\r\n            />\r\n\r\n            <Input\r\n                placeholder=\"Confirm userPassword\"\r\n                label=\"Confirm Password\"\r\n                leftIcon={{type: 'material', name: 'lock'}}\r\n                value={confirmPassword}\r\n                onChangeText={text=> setConfirmPassword(text)}\r\n                secureTextEntry\r\n            />\r\n\r\n            <TouchableOpacity title =\"Register\" onPress={checkNameExist} style={styles.button}><Text style={styles.texts}>Register</Text></TouchableOpacity>\r\n\r\n        </View>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create\r\n({\r\n    Logo: {\r\n        width: 250,\r\n        height: 250,\r\n        marginBottom: 30,\r\n    },\r\n    texts: {\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        color: 'black',\r\n        fontSize: 20,\r\n    },\r\n\r\n    button: {\r\n        backgroundColor: '#daa520',\r\n        height: 50,\r\n        width: 200,\r\n        marginTop: 10,\r\n        borderRadius: 15,\r\n        borderWidth: 5,\r\n        justifyContent: \"center\",\r\n        alignItems: 'center',\r\n\r\n    },\r\n    container: {\r\n        flex: 1,\r\n        alignItems: 'center',\r\n        padding: 10,\r\n    }\r\n\r\n\r\n}\r\n)\r\n\r\n"]},"metadata":{},"sourceType":"module"}