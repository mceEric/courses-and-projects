{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Modal from \"../Modal\";\nimport Surface from \"../Surface\";\nimport DialogContent from \"./DialogContent\";\nimport DialogActions from \"./DialogActions\";\nimport DialogTitle from \"./DialogTitle\";\nimport DialogScrollArea from \"./DialogScrollArea\";\nimport { withTheme } from \"../../core/theming\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar Dialog = function (_React$Component) {\n  _inherits(Dialog, _React$Component);\n\n  var _super = _createSuper(Dialog);\n\n  function Dialog() {\n    _classCallCheck(this, Dialog);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Dialog, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          dismissable = _this$props.dismissable,\n          onDismiss = _this$props.onDismiss,\n          visible = _this$props.visible,\n          style = _this$props.style,\n          theme = _this$props.theme;\n      return _jsx(Modal, {\n        dismissable: dismissable,\n        onDismiss: onDismiss,\n        visible: visible,\n        children: _jsx(Surface, {\n          style: [styles.container, {\n            borderRadius: theme.roundness\n          }, style],\n          children: React.Children.toArray(children).filter(function (child) {\n            return child != null && typeof child !== 'boolean';\n          }).map(function (child, i) {\n            if (i === 0 && React.isValidElement(child) && child.type === DialogContent) {\n              return React.cloneElement(child, {\n                style: [{\n                  paddingTop: 24\n                }, child.props.style]\n              });\n            }\n\n            return child;\n          })\n        })\n      });\n    }\n  }]);\n\n  return Dialog;\n}(React.Component);\n\nDialog.Content = DialogContent;\nDialog.Actions = DialogActions;\nDialog.Title = DialogTitle;\nDialog.ScrollArea = DialogScrollArea;\nDialog.defaultProps = {\n  dismissable: true,\n  visible: false\n};\nvar styles = StyleSheet.create({\n  container: {\n    marginVertical: Platform.OS === 'android' ? 44 : 0,\n    marginHorizontal: 26,\n    elevation: 24\n  }\n});\nexport default withTheme(Dialog);","map":{"version":3,"sources":["C:/projectpog/2022-ca326-travel-guide/MapDisplay/node_modules/react-native-paper/src/components/Dialog/Dialog.js"],"names":["React","Modal","Surface","DialogContent","DialogActions","DialogTitle","DialogScrollArea","withTheme","Dialog","props","children","dismissable","onDismiss","visible","style","theme","styles","container","borderRadius","roundness","Children","toArray","filter","child","map","i","isValidElement","type","cloneElement","paddingTop","Component","Content","Actions","Title","ScrollArea","defaultProps","StyleSheet","create","marginVertical","Platform","OS","marginHorizontal","elevation"],"mappings":";;;;;;;;;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;AAEA,OAAOC,KAAP;AACA,OAAOC,OAAP;AACA,OAAOC,aAAP;AACA,OAAOC,aAAP;AACA,OAAOC,WAAP;AACA,OAAOC,gBAAP;AACA,SAASC,SAAT;;;IA0EMC,M;;;;;;;;;;;;;WAeJ,kBAAS;AACP,wBAOI,KAAKC,KAPT;AAAA,UACEC,QADF,eACEA,QADF;AAAA,UAEEC,WAFF,eAEEA,WAFF;AAAA,UAGEC,SAHF,eAGEA,SAHF;AAAA,UAIEC,OAJF,eAIEA,OAJF;AAAA,UAKEC,KALF,eAKEA,KALF;AAAA,UAMEC,KANF,eAMEA,KANF;AASA,aACE,KAAC,KAAD;AAAO,QAAA,WAAW,EAAEJ,WAApB;AAAiC,QAAA,SAAS,EAAEC,SAA5C;AAAuD,QAAA,OAAO,EAAEC,OAAhE;AAAA,kBACE,KAAC,OAAD;AACE,UAAA,KAAK,EAAE,CAACG,MAAM,CAACC,SAAR,EAAmB;AAAEC,YAAAA,YAAY,EAAEH,KAAK,CAACI;AAAtB,WAAnB,EAAsDL,KAAtD,CADT;AAAA,oBAGGd,KAAK,CAACoB,QAAN,CAAeC,OAAf,CAAuBX,QAAvB,EACEY,MADF,CACS,UAAAC,KAAK;AAAA,mBAAIA,KAAK,IAAI,IAAT,IAAiB,OAAOA,KAAP,KAAiB,SAAtC;AAAA,WADd,EAEEC,GAFF,CAEM,UAACD,KAAD,EAAQE,CAAR,EAAc;AACjB,gBACEA,CAAC,KAAK,CAAN,IACAzB,KAAK,CAAC0B,cAAN,CAAqBH,KAArB,CADA,IAEAA,KAAK,CAACI,IAAN,KAAexB,aAHjB,EAIE;AAEA,qBAAOH,KAAK,CAAC4B,YAAN,CAAmBL,KAAnB,EAA0B;AAC/BT,gBAAAA,KAAK,EAAE,CAAC;AAAEe,kBAAAA,UAAU,EAAE;AAAd,iBAAD,EAAqBN,KAAK,CAACd,KAAN,CAAYK,KAAjC;AADwB,eAA1B,CAAP;AAGD;;AAED,mBAAOS,KAAP;AACD,WAfF;AAHH;AADF,QADF;AAwBD;;;;EAjDkBvB,KAAK,CAAC8B,S;;AAArBtB,M,CAEGuB,O,GAAU5B,a;AAFbK,M,CAIGwB,O,GAAU5B,a;AAJbI,M,CAMGyB,K,GAAQ5B,W;AANXG,M,CAQG0B,U,GAAa5B,gB;AARhBE,M,CAUG2B,Y,GAAe;AACpBxB,EAAAA,WAAW,EAAE,IADO;AAEpBE,EAAAA,OAAO,EAAE;AAFW,C;AA0CxB,IAAMG,MAAM,GAAGoB,UAAU,CAACC,MAAX,CAAkB;AAC/BpB,EAAAA,SAAS,EAAE;AAQTqB,IAAAA,cAAc,EAAEC,QAAQ,CAACC,EAAT,KAAgB,SAAhB,GAA4B,EAA5B,GAAiC,CARxC;AASTC,IAAAA,gBAAgB,EAAE,EATT;AAUTC,IAAAA,SAAS,EAAE;AAVF;AADoB,CAAlB,CAAf;AAeA,eAAenC,SAAS,CAACC,MAAD,CAAxB","sourcesContent":["/* @flow */\r\n\r\nimport * as React from 'react';\r\nimport { StyleSheet, Platform } from 'react-native';\r\nimport Modal from '../Modal';\r\nimport Surface from '../Surface';\r\nimport DialogContent from './DialogContent';\r\nimport DialogActions from './DialogActions';\r\nimport DialogTitle from './DialogTitle';\r\nimport DialogScrollArea from './DialogScrollArea';\r\nimport { withTheme } from '../../core/theming';\r\nimport type { Theme } from '../../types';\r\n\r\ntype Props = {\r\n  /**\r\n   * Determines whether clicking outside the dialog dismiss it.\r\n   */\r\n  dismissable?: boolean,\r\n  /**\r\n   * Callback that is called when the user dismisses the dialog.\r\n   */\r\n  onDismiss: () => mixed,\r\n  /**\r\n   * Determines Whether the dialog is visible.\r\n   */\r\n  visible: boolean,\r\n  /**\r\n   * Content of the `Dialog`.\r\n   */\r\n  children: React.Node,\r\n  style?: any,\r\n  /**\r\n   * @optional\r\n   */\r\n  theme: Theme,\r\n};\r\n\r\n/**\r\n * Dialogs inform users about a specific task and may contain critical information, require decisions, or involve multiple tasks.\r\n * To render the `Dialog` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\r\n *\r\n *  <div class=\"screenshots\">\r\n *   <img class=\"medium\" src=\"screenshots/dialog-1.png\" />\r\n *   <img class=\"medium\" src=\"screenshots/dialog-2.png\" />\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { View } from 'react-native';\r\n * import { Button, Paragraph, Dialog, Portal } from 'react-native-paper';\r\n *\r\n * export default class MyComponent extends React.Component {\r\n *   state = {\r\n *     visible: false,\r\n *   };\r\n *\r\n *   _showDialog = () => this.setState({ visible: true });\r\n *\r\n *   _hideDialog = () => this.setState({ visible: false });\r\n *\r\n *   render() {\r\n *     return (\r\n *       <View>\r\n *         <Button onPress={this._showDialog}>Show Dialog</Button>\r\n *         <Portal>\r\n *           <Dialog\r\n *              visible={this.state.visible}\r\n *              onDismiss={this._hideDialog}>\r\n *             <Dialog.Title>Alert</Dialog.Title>\r\n *             <Dialog.Content>\r\n *               <Paragraph>This is simple dialog</Paragraph>\r\n *             </Dialog.Content>\r\n *             <Dialog.Actions>\r\n *               <Button onPress={this._hideDialog}>Done</Button>\r\n *             </Dialog.Actions>\r\n *           </Dialog>\r\n *         </Portal>\r\n *       </View>\r\n *     );\r\n *   }\r\n * }\r\n * ```\r\n */\r\nclass Dialog extends React.Component<Props, void> {\r\n  // @component ./DialogContent.js\r\n  static Content = DialogContent;\r\n  // @component ./DialogActions.js\r\n  static Actions = DialogActions;\r\n  // @component ./DialogTitle.js\r\n  static Title = DialogTitle;\r\n  // @component ./DialogScrollArea.js\r\n  static ScrollArea = DialogScrollArea;\r\n\r\n  static defaultProps = {\r\n    dismissable: true,\r\n    visible: false,\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      children,\r\n      dismissable,\r\n      onDismiss,\r\n      visible,\r\n      style,\r\n      theme,\r\n    } = this.props;\r\n\r\n    return (\r\n      <Modal dismissable={dismissable} onDismiss={onDismiss} visible={visible}>\r\n        <Surface\r\n          style={[styles.container, { borderRadius: theme.roundness }, style]}\r\n        >\r\n          {React.Children.toArray(children)\r\n            .filter(child => child != null && typeof child !== 'boolean')\r\n            .map((child, i) => {\r\n              if (\r\n                i === 0 &&\r\n                React.isValidElement(child) &&\r\n                child.type === DialogContent\r\n              ) {\r\n                // Dialog content is the first item, so we add a top padding\r\n                return React.cloneElement(child, {\r\n                  style: [{ paddingTop: 24 }, child.props.style],\r\n                });\r\n              }\r\n\r\n              return child;\r\n            })}\r\n        </Surface>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    /**\r\n     * This prevents the shadow from being clipped on Android since Android\r\n     * doesn't support `overflow: visible`.\r\n     * One downside for this fix is that it will disable clicks on the area\r\n     * of the shadow around the dialog, consequently, if you click around the\r\n     * dialog (44 pixel from the top and bottom) it won't be dismissed.\r\n     */\r\n    marginVertical: Platform.OS === 'android' ? 44 : 0,\r\n    marginHorizontal: 26,\r\n    elevation: 24,\r\n  },\r\n});\r\n\r\nexport default withTheme(Dialog);\r\n"]},"metadata":{},"sourceType":"module"}