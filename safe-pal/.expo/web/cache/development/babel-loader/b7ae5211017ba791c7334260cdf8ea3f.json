{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"placeholder\", \"onIconPress\", \"icon\", \"value\", \"theme\", \"style\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport color from 'color';\nimport IconButton from \"./IconButton\";\nimport Surface from \"./Surface\";\nimport { withTheme } from \"../core/theming\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Searchbar = function (_React$Component) {\n  _inherits(Searchbar, _React$Component);\n\n  var _super = _createSuper(Searchbar);\n\n  function Searchbar() {\n    var _this;\n\n    _classCallCheck(this, Searchbar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this._handleClearPress = function () {\n      _this.clear();\n\n      _this.props.onChangeText && _this.props.onChangeText('');\n    };\n\n    return _this;\n  }\n\n  _createClass(Searchbar, [{\n    key: \"setNativeProps\",\n    value: function setNativeProps() {\n      var _this$_root;\n\n      return this._root && (_this$_root = this._root).setNativeProps.apply(_this$_root, arguments);\n    }\n  }, {\n    key: \"isFocused\",\n    value: function isFocused() {\n      return this._root && this._root.isFocused();\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      return this._root && this._root.clear();\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      return this._root && this._root.focus();\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      return this._root && this._root.blur();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          placeholder = _this$props.placeholder,\n          onIconPress = _this$props.onIconPress,\n          icon = _this$props.icon,\n          value = _this$props.value,\n          theme = _this$props.theme,\n          style = _this$props.style,\n          rest = _objectWithoutProperties(_this$props, _excluded);\n\n      var colors = theme.colors,\n          roundness = theme.roundness,\n          dark = theme.dark;\n      var textColor = colors.text;\n      var iconColor = dark ? textColor : color(textColor).alpha(0.54).rgb().string();\n      var rippleColor = color(textColor).alpha(0.32).rgb().string();\n      return _jsxs(Surface, {\n        style: [{\n          borderRadius: roundness,\n          elevation: 4\n        }, styles.container, style],\n        children: [_jsx(IconButton, {\n          borderless: true,\n          rippleColor: rippleColor,\n          onPress: onIconPress,\n          color: iconColor,\n          icon: icon || 'search'\n        }), _jsx(TextInput, _objectSpread({\n          style: [styles.input, {\n            color: textColor\n          }],\n          placeholder: placeholder || '',\n          placeholderTextColor: colors.placeholder,\n          selectionColor: colors.primary,\n          underlineColorAndroid: \"transparent\",\n          returnKeyType: \"search\",\n          accessibilityTraits: \"search\",\n          accessibilityRole: \"search\",\n          ref: function ref(c) {\n            _this2._root = c;\n          },\n          value: value\n        }, rest)), value ? _jsx(IconButton, {\n          borderless: true,\n          color: iconColor,\n          rippleColor: rippleColor,\n          onPress: this._handleClearPress,\n          icon: \"close\",\n          accessibilityTraits: \"button\",\n          accessibilityComponentType: \"button\",\n          accessibilityRole: \"button\"\n        }) : null]\n      });\n    }\n  }]);\n\n  return Searchbar;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  input: {\n    flex: 1,\n    fontSize: 18,\n    paddingLeft: 8,\n    alignSelf: 'stretch'\n  }\n});\nexport default withTheme(Searchbar);","map":{"version":3,"sources":["C:/projectpog/2022-ca326-travel-guide/MapDisplay/node_modules/react-native-paper/src/components/Searchbar.js"],"names":["React","color","IconButton","Surface","withTheme","Searchbar","_handleClearPress","clear","props","onChangeText","_root","setNativeProps","isFocused","focus","blur","placeholder","onIconPress","icon","value","theme","style","rest","colors","roundness","dark","textColor","text","iconColor","alpha","rgb","string","rippleColor","borderRadius","elevation","styles","container","input","primary","c","Component","StyleSheet","create","flexDirection","alignItems","flex","fontSize","paddingLeft","alignSelf"],"mappings":"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","sourcesContent":["/* @flow */\r\n\r\nimport * as React from 'react';\r\nimport { StyleSheet, TextInput } from 'react-native';\r\n\r\nimport color from 'color';\r\nimport IconButton from './IconButton';\r\nimport Surface from './Surface';\r\nimport { withTheme } from '../core/theming';\r\nimport type { Theme } from '../types';\r\nimport type { IconSource } from './Icon';\r\n\r\ntype Props = {\r\n  /**\r\n   * Hint text shown when the input is empty.\r\n   */\r\n  placeholder?: string,\r\n  /**\r\n   * The value of the text input.\r\n   */\r\n  value: string,\r\n  /**\r\n   * Icon name for the left icon button (see `onIconPress`).\r\n   */\r\n  icon?: IconSource,\r\n  /**\r\n   * Callback that is called when the text input's text changes.\r\n   */\r\n  onChangeText?: (query: string) => void,\r\n  /**\r\n   * Callback to execute if we want the left icon to act as button.\r\n   */\r\n  onIconPress?: () => mixed,\r\n  style?: any,\r\n  /**\r\n   * @optional\r\n   */\r\n  theme: Theme,\r\n};\r\n\r\n/**\r\n * Searchbar is a simple input box where users can type search queries.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <img class=\"medium\" src=\"screenshots/searchbar.png\" />\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { Searchbar } from 'react-native-paper';\r\n *\r\n * export default class MyComponent extends React.Component {\r\n *   state = {\r\n *     firstQuery: '',\r\n *   };\r\n *\r\n *   render() {\r\n *     const { firstQuery } = this.state;\r\n *     return (\r\n *       <Searchbar\r\n *         placeholder=\"Search\"\r\n *         onChangeText={query => { this.setState({ firstQuery: query }); }}\r\n *         value={firstQuery}\r\n *       />\r\n *     );\r\n *   }\r\n * }\r\n * ```\r\n */\r\nclass Searchbar extends React.Component<Props> {\r\n  _handleClearPress = () => {\r\n    this.clear();\r\n    this.props.onChangeText && this.props.onChangeText('');\r\n  };\r\n\r\n  _root: ?TextInput;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  setNativeProps(...args) {\r\n    return this._root && this._root.setNativeProps(...args);\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if the input is currently focused, `false` otherwise.\r\n   */\r\n  isFocused() {\r\n    return this._root && this._root.isFocused();\r\n  }\r\n\r\n  /**\r\n   * Removes all text from the TextInput.\r\n   */\r\n  clear() {\r\n    return this._root && this._root.clear();\r\n  }\r\n\r\n  /**\r\n   * Focuses the input.\r\n   */\r\n  focus() {\r\n    return this._root && this._root.focus();\r\n  }\r\n\r\n  /**\r\n   * Removes focus from the input.\r\n   */\r\n  blur() {\r\n    return this._root && this._root.blur();\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      placeholder,\r\n      onIconPress,\r\n      icon,\r\n      value,\r\n      theme,\r\n      style,\r\n      ...rest\r\n    } = this.props;\r\n    const { colors, roundness, dark } = theme;\r\n    const textColor = colors.text;\r\n    const iconColor = dark\r\n      ? textColor\r\n      : color(textColor)\r\n          .alpha(0.54)\r\n          .rgb()\r\n          .string();\r\n    const rippleColor = color(textColor)\r\n      .alpha(0.32)\r\n      .rgb()\r\n      .string();\r\n\r\n    return (\r\n      <Surface\r\n        style={[\r\n          { borderRadius: roundness, elevation: 4 },\r\n          styles.container,\r\n          style,\r\n        ]}\r\n      >\r\n        <IconButton\r\n          borderless\r\n          rippleColor={rippleColor}\r\n          onPress={onIconPress}\r\n          color={iconColor}\r\n          icon={icon || 'search'}\r\n        />\r\n        <TextInput\r\n          style={[styles.input, { color: textColor }]}\r\n          placeholder={placeholder || ''}\r\n          placeholderTextColor={colors.placeholder}\r\n          selectionColor={colors.primary}\r\n          underlineColorAndroid=\"transparent\"\r\n          returnKeyType=\"search\"\r\n          accessibilityTraits=\"search\"\r\n          accessibilityRole=\"search\"\r\n          ref={c => {\r\n            this._root = c;\r\n          }}\r\n          value={value}\r\n          {...rest}\r\n        />\r\n        {value ? (\r\n          <IconButton\r\n            borderless\r\n            color={iconColor}\r\n            rippleColor={rippleColor}\r\n            onPress={this._handleClearPress}\r\n            icon=\"close\"\r\n            accessibilityTraits=\"button\"\r\n            accessibilityComponentType=\"button\"\r\n            accessibilityRole=\"button\"\r\n          />\r\n        ) : null}\r\n      </Surface>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n  },\r\n  input: {\r\n    flex: 1,\r\n    fontSize: 18,\r\n    paddingLeft: 8,\r\n    alignSelf: 'stretch',\r\n  },\r\n});\r\n\r\nexport default withTheme(Searchbar);\r\n"]},"metadata":{},"sourceType":"module"}