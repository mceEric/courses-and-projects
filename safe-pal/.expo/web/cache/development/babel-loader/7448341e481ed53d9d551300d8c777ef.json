{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"left\", \"right\", \"title\", \"description\", \"onPress\", \"theme\", \"style\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport color from 'color';\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableRipple from \"../TouchableRipple\";\nimport Text from \"../Typography/Text\";\nimport { withTheme } from \"../../core/theming\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar ListItem = function (_React$Component) {\n  _inherits(ListItem, _React$Component);\n\n  var _super = _createSuper(ListItem);\n\n  function ListItem() {\n    _classCallCheck(this, ListItem);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ListItem, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          left = _this$props.left,\n          right = _this$props.right,\n          title = _this$props.title,\n          description = _this$props.description,\n          onPress = _this$props.onPress,\n          theme = _this$props.theme,\n          style = _this$props.style,\n          rest = _objectWithoutProperties(_this$props, _excluded);\n\n      var titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n      var descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n      return _jsx(TouchableRipple, _objectSpread(_objectSpread({}, rest), {}, {\n        style: [styles.container, style],\n        onPress: onPress,\n        children: _jsxs(View, {\n          style: styles.row,\n          children: [left ? left({\n            color: descriptionColor\n          }) : null, _jsxs(View, {\n            style: [styles.item, styles.content],\n            pointerEvents: \"none\",\n            children: [_jsx(Text, {\n              numberOfLines: 1,\n              style: [styles.title, {\n                color: titleColor\n              }],\n              children: title\n            }), description ? _jsx(Text, {\n              numberOfLines: 2,\n              style: [styles.description, {\n                color: descriptionColor\n              }],\n              children: description\n            }) : null]\n          }), right ? right({\n            color: descriptionColor\n          }) : null]\n        })\n      }));\n    }\n  }]);\n\n  return ListItem;\n}(React.Component);\n\nListItem.displayName = 'List.Item';\nvar styles = StyleSheet.create({\n  container: {\n    padding: 8\n  },\n  row: {\n    flexDirection: 'row'\n  },\n  title: {\n    fontSize: 16\n  },\n  description: {\n    fontSize: 14\n  },\n  item: {\n    margin: 8\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center'\n  }\n});\nexport default withTheme(ListItem);","map":{"version":3,"sources":["C:/projectpog/2022-ca326-travel-guide/MapDisplay/node_modules/react-native-paper/src/components/List/ListItem.js"],"names":["color","React","TouchableRipple","Text","withTheme","ListItem","props","left","right","title","description","onPress","theme","style","rest","titleColor","colors","text","alpha","rgb","string","descriptionColor","styles","container","row","item","content","Component","displayName","StyleSheet","create","padding","flexDirection","fontSize","margin","flex","justifyContent"],"mappings":";;;;;;;;;;;;;;;;;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;;AAEA,OAAOC,eAAP;AACA,OAAOC,IAAP;AACA,SAASC,SAAT;;;;IAwDMC,Q;;;;;;;;;;;;;WAGJ,kBAAS;AACP,wBASI,KAAKC,KATT;AAAA,UACEC,IADF,eACEA,IADF;AAAA,UAEEC,KAFF,eAEEA,KAFF;AAAA,UAGEC,KAHF,eAGEA,KAHF;AAAA,UAIEC,WAJF,eAIEA,WAJF;AAAA,UAKEC,OALF,eAKEA,OALF;AAAA,UAMEC,KANF,eAMEA,KANF;AAAA,UAOEC,KAPF,eAOEA,KAPF;AAAA,UAQKC,IARL;;AAUA,UAAMC,UAAU,GAAGf,KAAK,CAACY,KAAK,CAACI,MAAN,CAAaC,IAAd,CAAL,CAChBC,KADgB,CACV,IADU,EAEhBC,GAFgB,GAGhBC,MAHgB,EAAnB;AAIA,UAAMC,gBAAgB,GAAGrB,KAAK,CAACY,KAAK,CAACI,MAAN,CAAaC,IAAd,CAAL,CACtBC,KADsB,CAChB,IADgB,EAEtBC,GAFsB,GAGtBC,MAHsB,EAAzB;AAKA,aACE,KAAC,eAAD,kCACMN,IADN;AAEE,QAAA,KAAK,EAAE,CAACQ,MAAM,CAACC,SAAR,EAAmBV,KAAnB,CAFT;AAGE,QAAA,OAAO,EAAEF,OAHX;AAAA,kBAKE,MAAC,IAAD;AAAM,UAAA,KAAK,EAAEW,MAAM,CAACE,GAApB;AAAA,qBACGjB,IAAI,GAAGA,IAAI,CAAC;AAAEP,YAAAA,KAAK,EAAEqB;AAAT,WAAD,CAAP,GAAuC,IAD9C,EAEE,MAAC,IAAD;AAAM,YAAA,KAAK,EAAE,CAACC,MAAM,CAACG,IAAR,EAAcH,MAAM,CAACI,OAArB,CAAb;AAA4C,YAAA,aAAa,EAAC,MAA1D;AAAA,uBACE,KAAC,IAAD;AACE,cAAA,aAAa,EAAE,CADjB;AAEE,cAAA,KAAK,EAAE,CAACJ,MAAM,CAACb,KAAR,EAAe;AAAET,gBAAAA,KAAK,EAAEe;AAAT,eAAf,CAFT;AAAA,wBAIGN;AAJH,cADF,EAOGC,WAAW,GACV,KAAC,IAAD;AACE,cAAA,aAAa,EAAE,CADjB;AAEE,cAAA,KAAK,EAAE,CACLY,MAAM,CAACZ,WADF,EAEL;AACEV,gBAAAA,KAAK,EAAEqB;AADT,eAFK,CAFT;AAAA,wBASGX;AATH,cADU,GAYR,IAnBN;AAAA,YAFF,EAuBGF,KAAK,GAAGA,KAAK,CAAC;AAAER,YAAAA,KAAK,EAAEqB;AAAT,WAAD,CAAR,GAAwC,IAvBhD;AAAA;AALF,SADF;AAiCD;;;;EAxDoBpB,KAAK,CAAC0B,S;;AAAvBtB,Q,CACGuB,W,GAAc,W;AA0DvB,IAAMN,MAAM,GAAGO,UAAU,CAACC,MAAX,CAAkB;AAC/BP,EAAAA,SAAS,EAAE;AACTQ,IAAAA,OAAO,EAAE;AADA,GADoB;AAI/BP,EAAAA,GAAG,EAAE;AACHQ,IAAAA,aAAa,EAAE;AADZ,GAJ0B;AAO/BvB,EAAAA,KAAK,EAAE;AACLwB,IAAAA,QAAQ,EAAE;AADL,GAPwB;AAU/BvB,EAAAA,WAAW,EAAE;AACXuB,IAAAA,QAAQ,EAAE;AADC,GAVkB;AAa/BR,EAAAA,IAAI,EAAE;AACJS,IAAAA,MAAM,EAAE;AADJ,GAbyB;AAgB/BR,EAAAA,OAAO,EAAE;AACPS,IAAAA,IAAI,EAAE,CADC;AAEPC,IAAAA,cAAc,EAAE;AAFT;AAhBsB,CAAlB,CAAf;AAsBA,eAAehC,SAAS,CAACC,QAAD,CAAxB","sourcesContent":["/* @flow */\r\n\r\nimport color from 'color';\r\nimport * as React from 'react';\r\nimport { View, StyleSheet } from 'react-native';\r\nimport TouchableRipple from '../TouchableRipple';\r\nimport Text from '../Typography/Text';\r\nimport { withTheme } from '../../core/theming';\r\nimport type { Theme } from '../../types';\r\n\r\ntype Props = {\r\n  /**\r\n   * Title text for the list item.\r\n   */\r\n  title: React.Node,\r\n  /**\r\n   * Description text for the list item.\r\n   */\r\n  description?: React.Node,\r\n  /**\r\n   * Callback which returns a React element to display on the left side.\r\n   */\r\n  left?: (props: { color: string }) => React.Node,\r\n  /**\r\n   * Callback which returns a React element to display on the right side.\r\n   */\r\n  right?: (props: { color: string }) => React.Node,\r\n  /**\r\n   * Function to execute on press.\r\n   */\r\n  onPress?: () => mixed,\r\n  /**\r\n   * @optional\r\n   */\r\n  theme: Theme,\r\n  style?: any,\r\n};\r\n\r\n/**\r\n * A component to show tiles inside a List.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <img class=\"medium\" src=\"screenshots/list-item-1.png\" />\r\n *   <img class=\"medium\" src=\"screenshots/list-item-2.png\" />\r\n *   <img class=\"medium\" src=\"screenshots/list-item-3.png\" />\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { List } from 'react-native-paper';\r\n *\r\n * const MyComponent = () => (\r\n *   <List.Item\r\n *     title=\"First Item\"\r\n *     description=\"Item description\"\r\n *     left={props => <List.Icon {...props} icon=\"folder\" />}\r\n *   />\r\n * );\r\n *\r\n * export default MyComponent;\r\n * ```\r\n */\r\nclass ListItem extends React.Component<Props> {\r\n  static displayName = 'List.Item';\r\n\r\n  render() {\r\n    const {\r\n      left,\r\n      right,\r\n      title,\r\n      description,\r\n      onPress,\r\n      theme,\r\n      style,\r\n      ...rest\r\n    } = this.props;\r\n    const titleColor = color(theme.colors.text)\r\n      .alpha(0.87)\r\n      .rgb()\r\n      .string();\r\n    const descriptionColor = color(theme.colors.text)\r\n      .alpha(0.54)\r\n      .rgb()\r\n      .string();\r\n\r\n    return (\r\n      <TouchableRipple\r\n        {...rest}\r\n        style={[styles.container, style]}\r\n        onPress={onPress}\r\n      >\r\n        <View style={styles.row}>\r\n          {left ? left({ color: descriptionColor }) : null}\r\n          <View style={[styles.item, styles.content]} pointerEvents=\"none\">\r\n            <Text\r\n              numberOfLines={1}\r\n              style={[styles.title, { color: titleColor }]}\r\n            >\r\n              {title}\r\n            </Text>\r\n            {description ? (\r\n              <Text\r\n                numberOfLines={2}\r\n                style={[\r\n                  styles.description,\r\n                  {\r\n                    color: descriptionColor,\r\n                  },\r\n                ]}\r\n              >\r\n                {description}\r\n              </Text>\r\n            ) : null}\r\n          </View>\r\n          {right ? right({ color: descriptionColor }) : null}\r\n        </View>\r\n      </TouchableRipple>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    padding: 8,\r\n  },\r\n  row: {\r\n    flexDirection: 'row',\r\n  },\r\n  title: {\r\n    fontSize: 16,\r\n  },\r\n  description: {\r\n    fontSize: 14,\r\n  },\r\n  item: {\r\n    margin: 8,\r\n  },\r\n  content: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n  },\r\n});\r\n\r\nexport default withTheme(ListItem);\r\n"]},"metadata":{},"sourceType":"module"}