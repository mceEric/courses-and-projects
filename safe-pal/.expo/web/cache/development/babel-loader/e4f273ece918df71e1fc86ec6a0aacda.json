{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"value\", \"disabled\", \"onValueChange\", \"color\", \"theme\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport { grey400, grey800, grey50, white, black } from \"../styles/colors\";\nimport NativeSwitch from \"react-native-web/dist/exports/Switch\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport setColor from 'color';\nimport { withTheme } from \"../core/theming\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar Switch = function (_React$Component) {\n  _inherits(Switch, _React$Component);\n\n  var _super = _createSuper(Switch);\n\n  function Switch() {\n    _classCallCheck(this, Switch);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Switch, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          value = _this$props.value,\n          disabled = _this$props.disabled,\n          onValueChange = _this$props.onValueChange,\n          color = _this$props.color,\n          theme = _this$props.theme,\n          props = _objectWithoutProperties(_this$props, _excluded);\n\n      var checkedColor = color || theme.colors.accent;\n      var trackTintColor = Platform.OS === 'ios' ? checkedColor : disabled ? theme.dark ? setColor(white).alpha(0.1).rgb().string() : setColor(black).alpha(0.12).rgb().string() : setColor(checkedColor).alpha(0.5).rgb().string();\n      var thumbTintColor = Platform.OS === 'ios' ? undefined : disabled ? theme.dark ? grey800 : grey400 : value ? checkedColor : theme.dark ? grey400 : grey50;\n      return _jsx(NativeSwitch, _objectSpread(_objectSpread({}, props), {}, {\n        value: value,\n        disabled: disabled,\n        onTintColor: trackTintColor,\n        thumbTintColor: thumbTintColor,\n        onValueChange: disabled ? undefined : onValueChange\n      }));\n    }\n  }]);\n\n  return Switch;\n}(React.Component);\n\nexport default withTheme(Switch);","map":{"version":3,"sources":["C:/projectpog/2022-ca326-travel-guide/MapDisplay/node_modules/react-native-paper/src/components/Switch.js"],"names":["React","grey400","grey800","grey50","white","black","setColor","withTheme","Switch","props","value","disabled","onValueChange","color","theme","checkedColor","colors","accent","trackTintColor","Platform","OS","dark","alpha","rgb","string","thumbTintColor","undefined","Component"],"mappings":";;;;;;;;;;;;;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,OAAT,EAAkBC,OAAlB,EAA2BC,MAA3B,EAAmCC,KAAnC,EAA0CC,KAA1C;;;AAEA,OAAOC,QAAP,MAAqB,OAArB;AACA,SAASC,SAAT;;;IAyEMC,M;;;;;;;;;;;;;WACJ,kBAAS;AACP,wBAOI,KAAKC,KAPT;AAAA,UACEC,KADF,eACEA,KADF;AAAA,UAEEC,QAFF,eAEEA,QAFF;AAAA,UAGEC,aAHF,eAGEA,aAHF;AAAA,UAIEC,KAJF,eAIEA,KAJF;AAAA,UAKEC,KALF,eAKEA,KALF;AAAA,UAMKL,KANL;;AASA,UAAMM,YAAY,GAAGF,KAAK,IAAIC,KAAK,CAACE,MAAN,CAAaC,MAA3C;AAEA,UAAMC,cAAc,GAClBC,QAAQ,CAACC,EAAT,KAAgB,KAAhB,GACIL,YADJ,GAEIJ,QAAQ,GACNG,KAAK,CAACO,IAAN,GACEf,QAAQ,CAACF,KAAD,CAAR,CACGkB,KADH,CACS,GADT,EAEGC,GAFH,GAGGC,MAHH,EADF,GAKElB,QAAQ,CAACD,KAAD,CAAR,CACGiB,KADH,CACS,IADT,EAEGC,GAFH,GAGGC,MAHH,EANI,GAUNlB,QAAQ,CAACS,YAAD,CAAR,CACGO,KADH,CACS,GADT,EAEGC,GAFH,GAGGC,MAHH,EAbR;AAkBA,UAAMC,cAAc,GAClBN,QAAQ,CAACC,EAAT,KAAgB,KAAhB,GACIM,SADJ,GAEIf,QAAQ,GACNG,KAAK,CAACO,IAAN,GACEnB,OADF,GAEED,OAHI,GAINS,KAAK,GACHK,YADG,GAEHD,KAAK,CAACO,IAAN,GACEpB,OADF,GAEEE,MAXZ;AAaA,aACE,KAAC,YAAD,kCACMM,KADN;AAEE,QAAA,KAAK,EAAEC,KAFT;AAGE,QAAA,QAAQ,EAAEC,QAHZ;AAIE,QAAA,WAAW,EAAEO,cAJf;AAKE,QAAA,cAAc,EAAEO,cALlB;AAME,QAAA,aAAa,EAAEd,QAAQ,GAAGe,SAAH,GAAed;AANxC,SADF;AAUD;;;;EAtDkBZ,KAAK,CAAC2B,S;;AAyD3B,eAAepB,SAAS,CAACC,MAAD,CAAxB","sourcesContent":["/* @flow */\r\nimport * as React from 'react';\r\n\r\nimport { grey400, grey800, grey50, white, black } from '../styles/colors';\r\nimport { Switch as NativeSwitch, Platform } from 'react-native';\r\nimport setColor from 'color';\r\nimport { withTheme } from '../core/theming';\r\nimport type { Theme } from '../types';\r\n\r\ntype Props = {\r\n  /**\r\n   * Disable toggling the switch.\r\n   */\r\n  disabled?: boolean,\r\n  /**\r\n   * Value of the switch, true means 'on', false means 'off'.\r\n   */\r\n  value?: boolean,\r\n  /**\r\n   * Custom color for switch.\r\n   */\r\n  color?: string,\r\n  /**\r\n   * Callback called with the new value when it changes.\r\n   */\r\n  onValueChange?: Function,\r\n  style?: any,\r\n  /**\r\n   * @optional\r\n   */\r\n  theme: Theme,\r\n};\r\n\r\n/**\r\n * Switch is a visual toggle between two mutually exclusive states â€” on and off.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <figure>\r\n *     <img src=\"screenshots/switch-enabled.android.png\" />\r\n *     <figcaption>Android (enabled)</figcaption>\r\n *   </figure>\r\n *   <figure>\r\n *     <img src=\"screenshots/switch-disabled.android.png\" />\r\n *     <figcaption>Android (disabled)</figcaption>\r\n *   </figure>\r\n *   <figure>\r\n *     <img src=\"screenshots/switch-enabled.ios.png\" />\r\n *     <figcaption>iOS (enabled)</figcaption>\r\n *   </figure>\r\n *   <figure>\r\n *     <img src=\"screenshots/switch-disabled.ios.png\" />\r\n *     <figcaption>iOS (disabled)</figcaption>\r\n *   </figure>\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { Switch } from 'react-native-paper';\r\n *\r\n * export default class MyComponent extends React.Component {\r\n *   state = {\r\n *     isSwitchOn: false,\r\n *   };\r\n *\r\n *   render() {\r\n *     const { isSwitchOn } = this.state;\r\n *     return (\r\n *       <Switch\r\n *         value={isSwitchOn}\r\n *         onValueChange={() =>\r\n *           { this.setState({ isSwitchOn: !isSwitchOn }); }\r\n *         }\r\n *       />\r\n *     );\r\n *   }\r\n * }\r\n * ```\r\n */\r\nclass Switch extends React.Component<Props> {\r\n  render() {\r\n    const {\r\n      value,\r\n      disabled,\r\n      onValueChange,\r\n      color,\r\n      theme,\r\n      ...props\r\n    } = this.props;\r\n\r\n    const checkedColor = color || theme.colors.accent;\r\n\r\n    const trackTintColor =\r\n      Platform.OS === 'ios'\r\n        ? checkedColor\r\n        : disabled\r\n          ? theme.dark\r\n            ? setColor(white)\r\n                .alpha(0.1)\r\n                .rgb()\r\n                .string()\r\n            : setColor(black)\r\n                .alpha(0.12)\r\n                .rgb()\r\n                .string()\r\n          : setColor(checkedColor)\r\n              .alpha(0.5)\r\n              .rgb()\r\n              .string();\r\n\r\n    const thumbTintColor =\r\n      Platform.OS === 'ios'\r\n        ? undefined\r\n        : disabled\r\n          ? theme.dark\r\n            ? grey800\r\n            : grey400\r\n          : value\r\n            ? checkedColor\r\n            : theme.dark\r\n              ? grey400\r\n              : grey50;\r\n\r\n    return (\r\n      <NativeSwitch\r\n        {...props}\r\n        value={value}\r\n        disabled={disabled}\r\n        onTintColor={trackTintColor}\r\n        thumbTintColor={thumbTintColor}\r\n        onValueChange={disabled ? undefined : onValueChange}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTheme(Switch);\r\n"]},"metadata":{},"sourceType":"module"}