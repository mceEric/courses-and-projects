{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"disabled\", \"onPress\", \"theme\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport { RadioButtonContext } from \"./RadioButtonGroup\";\nimport TouchableRipple from \"./TouchableRipple\";\nimport { withTheme } from \"../core/theming\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar BORDER_WIDTH = 2;\n\nvar RadioButtonAndroid = function (_React$Component) {\n  _inherits(RadioButtonAndroid, _React$Component);\n\n  var _super = _createSuper(RadioButtonAndroid);\n\n  function RadioButtonAndroid() {\n    var _this;\n\n    _classCallCheck(this, RadioButtonAndroid);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      borderAnim: new Animated.Value(BORDER_WIDTH),\n      radioAnim: new Animated.Value(1)\n    };\n    return _this;\n  }\n\n  _createClass(RadioButtonAndroid, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.status === this.props.status) {\n        return;\n      }\n\n      if (this.props.status === 'checked') {\n        this.state.radioAnim.setValue(1.2);\n        Animated.timing(this.state.radioAnim, {\n          toValue: 1,\n          duration: 150\n        }).start();\n      } else {\n        this.state.borderAnim.setValue(10);\n        Animated.timing(this.state.borderAnim, {\n          toValue: BORDER_WIDTH,\n          duration: 150\n        }).start();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return _jsx(RadioButtonContext.Consumer, {\n        children: function children(context) {\n          var _this2$props = _this2.props,\n              disabled = _this2$props.disabled,\n              onPress = _this2$props.onPress,\n              theme = _this2$props.theme,\n              rest = _objectWithoutProperties(_this2$props, _excluded);\n\n          var checkedColor = _this2.props.color || theme.colors.accent;\n          var uncheckedColor = _this2.props.uncheckedColor || color(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();\n          var rippleColor, radioColor;\n          var checked = context ? context.value === _this2.props.value : _this2.props.status === 'checked';\n\n          if (disabled) {\n            rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n            radioColor = theme.colors.disabled;\n          } else {\n            rippleColor = color(checkedColor).fade(0.32).rgb().string();\n            radioColor = checked ? checkedColor : uncheckedColor;\n          }\n\n          return _jsx(TouchableRipple, _objectSpread(_objectSpread({}, rest), {}, {\n            borderless: true,\n            rippleColor: rippleColor,\n            onPress: disabled ? undefined : function () {\n              context && context.onValueChange(_this2.props.value);\n              onPress && onPress();\n            },\n            accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n            accessibilityComponentType: checked ? 'radiobutton_checked' : 'radiobutton_unchecked',\n            accessibilityRole: \"button\",\n            accessibilityStates: disabled ? ['disabled'] : undefined,\n            accessibilityLiveRegion: \"polite\",\n            style: styles.container,\n            children: _jsx(Animated.View, {\n              style: [styles.radio, {\n                borderColor: radioColor,\n                borderWidth: _this2.state.borderAnim\n              }],\n              children: checked ? _jsx(View, {\n                style: [StyleSheet.absoluteFill, styles.radioContainer],\n                children: _jsx(Animated.View, {\n                  style: [styles.dot, {\n                    backgroundColor: radioColor,\n                    transform: [{\n                      scale: _this2.state.radioAnim\n                    }]\n                  }]\n                })\n              }) : null\n            })\n          }));\n        }\n      });\n    }\n  }]);\n\n  return RadioButtonAndroid;\n}(React.Component);\n\nRadioButtonAndroid.displayName = 'RadioButton.Android';\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 18\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5\n  }\n});\nexport default withTheme(RadioButtonAndroid);","map":{"version":3,"sources":["C:/projectpog/2022-ca326-travel-guide/MapDisplay/node_modules/react-native-paper/src/components/RadioButtonAndroid.js"],"names":["React","color","RadioButtonContext","TouchableRipple","withTheme","BORDER_WIDTH","RadioButtonAndroid","state","borderAnim","Animated","Value","radioAnim","prevProps","status","props","setValue","timing","toValue","duration","start","context","disabled","onPress","theme","rest","checkedColor","colors","accent","uncheckedColor","text","alpha","dark","rgb","string","rippleColor","radioColor","checked","value","fade","undefined","onValueChange","styles","container","radio","borderColor","borderWidth","StyleSheet","absoluteFill","radioContainer","dot","backgroundColor","transform","scale","Component","displayName","create","borderRadius","alignItems","justifyContent","height","width","margin"],"mappings":"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","sourcesContent":["/* @flow */\r\n\r\nimport * as React from 'react';\r\nimport { Animated, View, StyleSheet } from 'react-native';\r\nimport color from 'color';\r\nimport { RadioButtonContext } from './RadioButtonGroup';\r\nimport TouchableRipple from './TouchableRipple';\r\nimport { withTheme } from '../core/theming';\r\nimport type { Theme } from '../types';\r\n\r\ntype Props = {\r\n  /**\r\n   * Value of the radio button\r\n   */\r\n  value: string,\r\n  /**\r\n   * Status of radio button.\r\n   */\r\n  status?: 'checked' | 'unchecked',\r\n  /**\r\n   * Whether radio is disabled.\r\n   */\r\n  disabled?: boolean,\r\n  /**\r\n   * Function to execute on press.\r\n   */\r\n  onPress?: () => mixed,\r\n  /**\r\n   * Custom color for unchecked radio.\r\n   */\r\n  uncheckedColor?: string,\r\n  /**\r\n   * Custom color for radio.\r\n   */\r\n  color?: string,\r\n  /**\r\n   * @optional\r\n   */\r\n  theme: Theme,\r\n};\r\n\r\ntype State = {\r\n  borderAnim: Animated.Value,\r\n  radioAnim: Animated.Value,\r\n};\r\n\r\nconst BORDER_WIDTH = 2;\r\n\r\n/**\r\n * Radio buttons allow the selection a single option from a set.\r\n * This component follows platform guidelines for Android.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <figure>\r\n *     <img src=\"screenshots/radio-enabled.android.png\" />\r\n *     <figcaption>Enabled</figcaption>\r\n *   </figure>\r\n *   <figure>\r\n *     <img src=\"screenshots/radio-disabled.android.png\" />\r\n *     <figcaption>Disabled</figcaption>\r\n *   </figure>\r\n * </div>\r\n */\r\nclass RadioButtonAndroid extends React.Component<Props, State> {\r\n  static displayName = 'RadioButton.Android';\r\n\r\n  state = {\r\n    borderAnim: new Animated.Value(BORDER_WIDTH),\r\n    radioAnim: new Animated.Value(1),\r\n  };\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.status === this.props.status) {\r\n      return;\r\n    }\r\n\r\n    if (this.props.status === 'checked') {\r\n      this.state.radioAnim.setValue(1.2);\r\n\r\n      Animated.timing(this.state.radioAnim, {\r\n        toValue: 1,\r\n        duration: 150,\r\n      }).start();\r\n    } else {\r\n      this.state.borderAnim.setValue(10);\r\n\r\n      Animated.timing(this.state.borderAnim, {\r\n        toValue: BORDER_WIDTH,\r\n        duration: 150,\r\n      }).start();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <RadioButtonContext.Consumer>\r\n        {context => {\r\n          const { disabled, onPress, theme, ...rest } = this.props;\r\n          const checkedColor = this.props.color || theme.colors.accent;\r\n          const uncheckedColor =\r\n            this.props.uncheckedColor ||\r\n            color(theme.colors.text)\r\n              .alpha(theme.dark ? 0.7 : 0.54)\r\n              .rgb()\r\n              .string();\r\n\r\n          let rippleColor, radioColor;\r\n\r\n          const checked = context\r\n            ? context.value === this.props.value\r\n            : this.props.status === 'checked';\r\n\r\n          if (disabled) {\r\n            rippleColor = color(theme.colors.text)\r\n              .alpha(0.16)\r\n              .rgb()\r\n              .string();\r\n            radioColor = theme.colors.disabled;\r\n          } else {\r\n            rippleColor = color(checkedColor)\r\n              .fade(0.32)\r\n              .rgb()\r\n              .string();\r\n            radioColor = checked ? checkedColor : uncheckedColor;\r\n          }\r\n\r\n          return (\r\n            <TouchableRipple\r\n              {...rest}\r\n              borderless\r\n              rippleColor={rippleColor}\r\n              onPress={\r\n                disabled\r\n                  ? undefined\r\n                  : () => {\r\n                      context && context.onValueChange(this.props.value);\r\n                      onPress && onPress();\r\n                    }\r\n              }\r\n              accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\r\n              accessibilityComponentType={\r\n                checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\r\n              }\r\n              accessibilityRole=\"button\"\r\n              accessibilityStates={disabled ? ['disabled'] : undefined}\r\n              accessibilityLiveRegion=\"polite\"\r\n              style={styles.container}\r\n            >\r\n              <Animated.View\r\n                style={[\r\n                  styles.radio,\r\n                  {\r\n                    borderColor: radioColor,\r\n                    borderWidth: this.state.borderAnim,\r\n                  },\r\n                ]}\r\n              >\r\n                {checked ? (\r\n                  <View\r\n                    style={[StyleSheet.absoluteFill, styles.radioContainer]}\r\n                  >\r\n                    <Animated.View\r\n                      style={[\r\n                        styles.dot,\r\n                        {\r\n                          backgroundColor: radioColor,\r\n                          transform: [{ scale: this.state.radioAnim }],\r\n                        },\r\n                      ]}\r\n                    />\r\n                  </View>\r\n                ) : null}\r\n              </Animated.View>\r\n            </TouchableRipple>\r\n          );\r\n        }}\r\n      </RadioButtonContext.Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    borderRadius: 18,\r\n  },\r\n  radioContainer: {\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  radio: {\r\n    height: 20,\r\n    width: 20,\r\n    borderRadius: 10,\r\n    margin: 8,\r\n  },\r\n  dot: {\r\n    height: 10,\r\n    width: 10,\r\n    borderRadius: 5,\r\n  },\r\n});\r\n\r\nexport default withTheme(RadioButtonAndroid);\r\n"]},"metadata":{},"sourceType":"module"}