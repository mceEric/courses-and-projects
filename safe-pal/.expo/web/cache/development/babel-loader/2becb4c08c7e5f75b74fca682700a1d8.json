{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport color from 'color';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"./Typography/Text\";\nimport { withTheme } from \"../core/theming\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar AnimatedText = Animated.createAnimatedComponent(Text);\n\nvar HelperText = function (_React$PureComponent) {\n  _inherits(HelperText, _React$PureComponent);\n\n  var _super = _createSuper(HelperText);\n\n  function HelperText() {\n    var _this;\n\n    _classCallCheck(this, HelperText);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      shown: new Animated.Value(_this.props.visible ? 1 : 0),\n      textHeight: 0\n    };\n\n    _this._animateFocus = function () {\n      Animated.timing(_this.state.shown, {\n        toValue: 1,\n        duration: 150,\n        useNativeDriver: true\n      }).start();\n    };\n\n    _this._animateBlur = function () {\n      Animated.timing(_this.state.shown, {\n        toValue: 0,\n        duration: 180,\n        useNativeDriver: true\n      }).start();\n    };\n\n    _this._handleTextLayout = function (e) {\n      return _this.setState({\n        textHeight: e.nativeEvent.layout.height\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(HelperText, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.visible !== this.props.visible) {\n        if (this.props.visible) {\n          this._animateFocus();\n        } else {\n          this._animateBlur();\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          style = _this$props.style,\n          type = _this$props.type,\n          visible = _this$props.visible,\n          theme = _this$props.theme;\n      var colors = theme.colors,\n          dark = theme.dark;\n      var textColor = this.props.type === 'error' ? colors.error : color(colors.text).alpha(dark ? 0.7 : 0.54).rgb().string();\n      return _jsx(AnimatedText, {\n        onLayout: this._handleTextLayout,\n        style: [styles.text, {\n          color: textColor,\n          opacity: this.state.shown,\n          transform: visible && type === 'error' ? [{\n            translateY: this.state.shown.interpolate({\n              inputRange: [0, 1],\n              outputRange: [-this.state.textHeight / 2, 0]\n            })\n          }] : []\n        }, style],\n        children: this.props.children\n      });\n    }\n  }]);\n\n  return HelperText;\n}(React.PureComponent);\n\nHelperText.defaultProps = {\n  type: 'info',\n  visible: true\n};\nvar styles = StyleSheet.create({\n  text: {\n    fontSize: 12,\n    paddingVertical: 4,\n    paddingHorizontal: 12\n  }\n});\nexport default withTheme(HelperText);","map":{"version":3,"sources":["C:/projectpog/2022-ca326-travel-guide/MapDisplay/node_modules/react-native-paper/src/components/HelperText.js"],"names":["React","color","Text","withTheme","AnimatedText","Animated","createAnimatedComponent","HelperText","state","shown","Value","props","visible","textHeight","_animateFocus","timing","toValue","duration","useNativeDriver","start","_animateBlur","_handleTextLayout","e","setState","nativeEvent","layout","height","prevProps","style","type","theme","colors","dark","textColor","error","text","alpha","rgb","string","styles","opacity","transform","translateY","interpolate","inputRange","outputRange","children","PureComponent","defaultProps","StyleSheet","create","fontSize","paddingVertical","paddingHorizontal"],"mappings":"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","sourcesContent":["/* @flow */\r\n\r\nimport * as React from 'react';\r\nimport color from 'color';\r\nimport { Animated, StyleSheet } from 'react-native';\r\nimport Text from './Typography/Text';\r\nimport { withTheme } from '../core/theming';\r\nimport type { Theme } from '../types';\r\n\r\nconst AnimatedText = Animated.createAnimatedComponent(Text);\r\n\r\ntype Props = {\r\n  /**\r\n   * Type of the helper text.\r\n   */\r\n  type: 'error' | 'info',\r\n  /**\r\n   * Whether to display the helper text.\r\n   */\r\n  visible?: boolean,\r\n  /**\r\n   * Text content of the HelperText.\r\n   */\r\n  children: React.Node,\r\n  style?: any,\r\n  /**\r\n   * @optional\r\n   */\r\n  theme: Theme,\r\n};\r\n\r\ntype State = {\r\n  shown: Animated.Value,\r\n  textHeight: number,\r\n};\r\n\r\n/**\r\n * Helper text is used in conjuction with input elements to provide additional hints for the user.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <img class=\"medium\" src=\"screenshots/helper-text.gif\" />\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { HelperText, TextInput } from 'react-native-paper';\r\n *\r\n * export default class MyComponent extends React.Component {\r\n *   state = {\r\n *     text: ''\r\n *   };\r\n *\r\n *   render(){\r\n *     return (\r\n *       <View>\r\n *         <TextInput\r\n *           label=\"Email\"\r\n *           value={this.state.text}\r\n *           onChangeText={text => this.setState({ text })}\r\n *         />\r\n *         <HelperText\r\n *           type=\"error\"\r\n *           visible={!this.state.text.includes('@')}\r\n *         >\r\n *           Email address is invalid!\r\n *         </HelperText>\r\n *       </View>\r\n *     );\r\n *   }\r\n * }\r\n * ```\r\n */\r\nclass HelperText extends React.PureComponent<Props, State> {\r\n  static defaultProps = {\r\n    type: 'info',\r\n    visible: true,\r\n  };\r\n\r\n  state = {\r\n    shown: new Animated.Value(this.props.visible ? 1 : 0),\r\n    textHeight: 0,\r\n  };\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.visible !== this.props.visible) {\r\n      if (this.props.visible) {\r\n        this._animateFocus();\r\n      } else {\r\n        this._animateBlur();\r\n      }\r\n    }\r\n  }\r\n\r\n  _animateFocus = () => {\r\n    Animated.timing(this.state.shown, {\r\n      toValue: 1,\r\n      duration: 150,\r\n      useNativeDriver: true,\r\n    }).start();\r\n  };\r\n\r\n  _animateBlur = () => {\r\n    Animated.timing(this.state.shown, {\r\n      toValue: 0,\r\n      duration: 180,\r\n      useNativeDriver: true,\r\n    }).start();\r\n  };\r\n\r\n  _handleTextLayout = e =>\r\n    this.setState({\r\n      textHeight: e.nativeEvent.layout.height,\r\n    });\r\n\r\n  render() {\r\n    const { style, type, visible, theme } = this.props;\r\n    const { colors, dark } = theme;\r\n\r\n    const textColor =\r\n      this.props.type === 'error'\r\n        ? colors.error\r\n        : color(colors.text)\r\n            .alpha(dark ? 0.7 : 0.54)\r\n            .rgb()\r\n            .string();\r\n\r\n    return (\r\n      <AnimatedText\r\n        onLayout={this._handleTextLayout}\r\n        style={[\r\n          styles.text,\r\n          {\r\n            color: textColor,\r\n            opacity: this.state.shown,\r\n            transform:\r\n              visible && type === 'error'\r\n                ? [\r\n                    {\r\n                      translateY: this.state.shown.interpolate({\r\n                        inputRange: [0, 1],\r\n                        outputRange: [-this.state.textHeight / 2, 0],\r\n                      }),\r\n                    },\r\n                  ]\r\n                : [],\r\n          },\r\n          style,\r\n        ]}\r\n      >\r\n        {this.props.children}\r\n      </AnimatedText>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  text: {\r\n    fontSize: 12,\r\n    paddingVertical: 4,\r\n    paddingHorizontal: 12,\r\n  },\r\n});\r\n\r\nexport default withTheme(HelperText);\r\n"]},"metadata":{},"sourceType":"module"}