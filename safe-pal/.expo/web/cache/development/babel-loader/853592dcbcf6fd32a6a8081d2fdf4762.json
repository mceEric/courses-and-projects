{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"style\", \"background\", \"borderless\", \"disabled\", \"rippleColor\", \"underlayColor\", \"children\", \"theme\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport View from \"react-native-web/dist/exports/View\";\nimport color from 'color';\nimport { withTheme } from \"../core/theming\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar ANDROID_VERSION_LOLLIPOP = 21;\n\nvar TouchableRipple = function (_React$Component) {\n  _inherits(TouchableRipple, _React$Component);\n\n  var _super = _createSuper(TouchableRipple);\n\n  function TouchableRipple() {\n    _classCallCheck(this, TouchableRipple);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TouchableRipple, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          style = _this$props.style,\n          background = _this$props.background,\n          borderless = _this$props.borderless,\n          disabledProp = _this$props.disabled,\n          rippleColor = _this$props.rippleColor,\n          underlayColor = _this$props.underlayColor,\n          children = _this$props.children,\n          theme = _this$props.theme,\n          rest = _objectWithoutProperties(_this$props, _excluded);\n\n      var dark = theme.dark,\n          colors = theme.colors;\n      var disabled = disabledProp || !this.props.onPress;\n      var calculatedRippleColor = rippleColor || color(colors.text).alpha(dark ? 0.32 : 0.2).rgb().string();\n\n      if (TouchableRipple.supported) {\n        return _jsx(TouchableNativeFeedback, _objectSpread(_objectSpread({}, rest), {}, {\n          disabled: disabled,\n          background: background != null ? background : TouchableNativeFeedback.Ripple(calculatedRippleColor, borderless),\n          children: _jsx(View, {\n            style: style,\n            children: React.Children.only(children)\n          })\n        }));\n      }\n\n      return _jsx(TouchableHighlight, _objectSpread(_objectSpread({}, rest), {}, {\n        disabled: disabled,\n        style: style,\n        underlayColor: underlayColor != null ? underlayColor : color(calculatedRippleColor).fade(0.5).rgb().string(),\n        children: React.Children.only(children)\n      }));\n    }\n  }]);\n\n  return TouchableRipple;\n}(React.Component);\n\nTouchableRipple.defaultProps = {\n  borderless: false\n};\nTouchableRipple.supported = Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;\nexport default withTheme(TouchableRipple);","map":{"version":3,"sources":["C:/projectpog/2022-ca326-travel-guide/MapDisplay/node_modules/react-native-paper/src/components/TouchableRipple.js"],"names":["React","color","withTheme","ANDROID_VERSION_LOLLIPOP","TouchableRipple","props","style","background","borderless","disabledProp","disabled","rippleColor","underlayColor","children","theme","rest","dark","colors","onPress","calculatedRippleColor","text","alpha","rgb","string","supported","TouchableNativeFeedback","Ripple","Children","only","fade","Component","defaultProps","Platform","OS","Version"],"mappings":";;;;;;;;;;;;;;;;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;;AAOA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT;;AAGA,IAAMC,wBAAwB,GAAG,EAAjC;;IA8DMC,e;;;;;;;;;;;;;WAWJ,kBAAS;AACP,wBAUI,KAAKC,KAVT;AAAA,UACEC,KADF,eACEA,KADF;AAAA,UAEEC,UAFF,eAEEA,UAFF;AAAA,UAGEC,UAHF,eAGEA,UAHF;AAAA,UAIYC,YAJZ,eAIEC,QAJF;AAAA,UAKEC,WALF,eAKEA,WALF;AAAA,UAMEC,aANF,eAMEA,aANF;AAAA,UAOEC,QAPF,eAOEA,QAPF;AAAA,UAQEC,KARF,eAQEA,KARF;AAAA,UASKC,IATL;;AAYA,UAAQC,IAAR,GAAyBF,KAAzB,CAAQE,IAAR;AAAA,UAAcC,MAAd,GAAyBH,KAAzB,CAAcG,MAAd;AACA,UAAMP,QAAQ,GAAGD,YAAY,IAAI,CAAC,KAAKJ,KAAL,CAAWa,OAA7C;AACA,UAAMC,qBAAqB,GACzBR,WAAW,IACXV,KAAK,CAACgB,MAAM,CAACG,IAAR,CAAL,CACGC,KADH,CACSL,IAAI,GAAG,IAAH,GAAU,GADvB,EAEGM,GAFH,GAGGC,MAHH,EAFF;;AAOA,UAAInB,eAAe,CAACoB,SAApB,EAA+B;AAC7B,eACE,KAAC,uBAAD,kCACMT,IADN;AAEE,UAAA,QAAQ,EAAEL,QAFZ;AAGE,UAAA,UAAU,EACRH,UAAU,IAAI,IAAd,GACIA,UADJ,GAEIkB,uBAAuB,CAACC,MAAxB,CACEP,qBADF,EAEEX,UAFF,CANR;AAAA,oBAYE,KAAC,IAAD;AAAM,YAAA,KAAK,EAAEF,KAAb;AAAA,sBAAqBN,KAAK,CAAC2B,QAAN,CAAeC,IAAf,CAAoBf,QAApB;AAArB;AAZF,WADF;AAgBD;;AAED,aAEE,KAAC,kBAAD,kCACME,IADN;AAEE,QAAA,QAAQ,EAAEL,QAFZ;AAGE,QAAA,KAAK,EAAEJ,KAHT;AAIE,QAAA,aAAa,EACXM,aAAa,IAAI,IAAjB,GACIA,aADJ,GAEIX,KAAK,CAACkB,qBAAD,CAAL,CACGU,IADH,CACQ,GADR,EAEGP,GAFH,GAGGC,MAHH,EAPR;AAAA,kBAaGvB,KAAK,CAAC2B,QAAN,CAAeC,IAAf,CAAoBf,QAApB;AAbH,SAFF;AAkBD;;;;EAtE2Bb,KAAK,CAAC8B,S;;AAA9B1B,e,CACG2B,Y,GAAe;AACpBvB,EAAAA,UAAU,EAAE;AADQ,C;AADlBJ,e,CAQGoB,S,GACLQ,QAAQ,CAACC,EAAT,KAAgB,SAAhB,IAA6BD,QAAQ,CAACE,OAAT,IAAoB/B,wB;AAgErD,eAAeD,SAAS,CAACE,eAAD,CAAxB","sourcesContent":["/* @flow */\r\n\r\nimport * as React from 'react';\r\nimport {\r\n  TouchableNativeFeedback,\r\n  TouchableHighlight,\r\n  Platform,\r\n  View,\r\n} from 'react-native';\r\nimport color from 'color';\r\nimport { withTheme } from '../core/theming';\r\nimport type { Theme } from '../types';\r\n\r\nconst ANDROID_VERSION_LOLLIPOP = 21;\r\n\r\ntype Props = {\r\n  /**\r\n   * Whether to render the ripple outside the view bounds.\r\n   */\r\n  borderless?: boolean,\r\n  /**\r\n   * Type of background drawabale to display the feedback.\r\n   * https://facebook.github.io/react-native/docs/touchablenativefeedback.html#background\r\n   */\r\n  background?: Object,\r\n  /**\r\n   * Whether to prevent interaction with the touchable.\r\n   */\r\n  disabled?: boolean,\r\n  /**\r\n   * Function to execute on press. If not set, will cause the touchable to be disabled.\r\n   */\r\n  onPress?: ?Function,\r\n  /**\r\n   * Color of the ripple effect.\r\n   */\r\n  rippleColor?: string,\r\n  /**\r\n   * Color of the underlay for the highlight effect.\r\n   */\r\n  underlayColor?: string,\r\n  /**\r\n   * Content of the `TouchableRipple`.\r\n   */\r\n  children: React.Node,\r\n  style?: any,\r\n  /**\r\n   * @optional\r\n   */\r\n  theme: Theme,\r\n};\r\n\r\n/**\r\n * A wrapper for views that should respond to touches.\r\n * Provides a material \"ink ripple\" interaction effect for supported platforms (>= Android Lollipop).\r\n * On unsupported platforms, it falls back to a highlight effect.\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { View } from 'react-native';\r\n * import { Text, TouchableRipple } from 'react-native-paper';\r\n *\r\n * const MyComponent = () => (\r\n *   <TouchableRipple\r\n *     onPress={() => console.log('Pressed')}\r\n *     rippleColor=\"rgba(0, 0, 0, .32)\"\r\n *   >\r\n *     <Text>Press me</Text>\r\n *   </TouchableRipple>\r\n * );\r\n *\r\n * export default MyComponent;\r\n * ```\r\n */\r\nclass TouchableRipple extends React.Component<Props, void> {\r\n  static defaultProps = {\r\n    borderless: false,\r\n  };\r\n\r\n  /**\r\n   * Whether ripple effect is supported.\r\n   */\r\n  static supported =\r\n    Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;\r\n\r\n  render() {\r\n    const {\r\n      style,\r\n      background,\r\n      borderless,\r\n      disabled: disabledProp,\r\n      rippleColor,\r\n      underlayColor,\r\n      children,\r\n      theme,\r\n      ...rest\r\n    } = this.props;\r\n\r\n    const { dark, colors } = theme;\r\n    const disabled = disabledProp || !this.props.onPress;\r\n    const calculatedRippleColor =\r\n      rippleColor ||\r\n      color(colors.text)\r\n        .alpha(dark ? 0.32 : 0.2)\r\n        .rgb()\r\n        .string();\r\n\r\n    if (TouchableRipple.supported) {\r\n      return (\r\n        <TouchableNativeFeedback\r\n          {...rest}\r\n          disabled={disabled}\r\n          background={\r\n            background != null\r\n              ? background\r\n              : TouchableNativeFeedback.Ripple(\r\n                  calculatedRippleColor,\r\n                  borderless\r\n                )\r\n          }\r\n        >\r\n          <View style={style}>{React.Children.only(children)}</View>\r\n        </TouchableNativeFeedback>\r\n      );\r\n    }\r\n\r\n    return (\r\n      /* $FlowFixMe */\r\n      <TouchableHighlight\r\n        {...rest}\r\n        disabled={disabled}\r\n        style={style}\r\n        underlayColor={\r\n          underlayColor != null\r\n            ? underlayColor\r\n            : color(calculatedRippleColor)\r\n                .fade(0.5)\r\n                .rgb()\r\n                .string()\r\n        }\r\n      >\r\n        {React.Children.only(children)}\r\n      </TouchableHighlight>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTheme(TouchableRipple);\r\n"]},"metadata":{},"sourceType":"module"}