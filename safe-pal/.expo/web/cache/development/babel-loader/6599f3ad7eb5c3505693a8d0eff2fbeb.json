{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"icon\", \"label\", \"active\", \"theme\", \"style\", \"onPress\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport color from 'color';\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"../Typography/Text\";\nimport Icon from \"../Icon\";\nimport TouchableRipple from \"../TouchableRipple\";\nimport { withTheme } from \"../../core/theming\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar DrawerItem = function (_React$Component) {\n  _inherits(DrawerItem, _React$Component);\n\n  var _super = _createSuper(DrawerItem);\n\n  function DrawerItem() {\n    _classCallCheck(this, DrawerItem);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DrawerItem, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          icon = _this$props.icon,\n          label = _this$props.label,\n          active = _this$props.active,\n          theme = _this$props.theme,\n          style = _this$props.style,\n          onPress = _this$props.onPress,\n          rest = _objectWithoutProperties(_this$props, _excluded);\n\n      var colors = theme.colors,\n          roundness = theme.roundness;\n      var backgroundColor = active ? color(colors.primary).alpha(0.12).rgb().string() : 'transparent';\n      var contentColor = active ? colors.primary : color(colors.text).alpha(0.68).rgb().string();\n      var fontFamily = theme.fonts.medium;\n      var labelMargin = icon ? 32 : 0;\n      return _jsx(View, _objectSpread(_objectSpread({}, rest), {}, {\n        style: [styles.container, {\n          backgroundColor: backgroundColor,\n          borderRadius: roundness\n        }, style],\n        children: _jsx(TouchableRipple, {\n          borderless: true,\n          delayPressIn: 0,\n          onPress: onPress,\n          style: {\n            borderRadius: roundness\n          },\n          accessibilityTraits: active ? ['button', 'selected'] : 'button',\n          accessibilityComponentType: \"button\",\n          accessibilityRole: \"button\",\n          accessibilityStates: active ? ['selected'] : undefined,\n          children: _jsxs(View, {\n            style: styles.wrapper,\n            children: [icon ? _jsx(Icon, {\n              source: icon,\n              size: 24,\n              color: contentColor\n            }) : null, _jsx(Text, {\n              numberOfLines: 1,\n              style: [styles.label, {\n                color: contentColor,\n                fontFamily: fontFamily,\n                marginLeft: labelMargin\n              }],\n              children: label\n            })]\n          })\n        })\n      }));\n    }\n  }]);\n\n  return DrawerItem;\n}(React.Component);\n\nDrawerItem.displayName = 'Drawer.Item';\nvar styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8\n  },\n  label: {\n    marginRight: 32\n  }\n});\nexport default withTheme(DrawerItem);","map":{"version":3,"sources":["C:/projectpog/2022-ca326-travel-guide/MapDisplay/node_modules/react-native-paper/src/components/Drawer/DrawerItem.js"],"names":["color","React","Text","Icon","TouchableRipple","withTheme","DrawerItem","props","icon","label","active","theme","style","onPress","rest","colors","roundness","backgroundColor","primary","alpha","rgb","string","contentColor","text","fontFamily","fonts","medium","labelMargin","styles","container","borderRadius","undefined","wrapper","marginLeft","Component","displayName","StyleSheet","create","marginHorizontal","marginVertical","flexDirection","alignItems","padding","marginRight"],"mappings":"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","sourcesContent":["/* @flow */\r\n\r\nimport color from 'color';\r\nimport * as React from 'react';\r\nimport { View, StyleSheet } from 'react-native';\r\nimport Text from '../Typography/Text';\r\nimport Icon from '../Icon';\r\nimport TouchableRipple from '../TouchableRipple';\r\nimport { withTheme } from '../../core/theming';\r\nimport type { Theme } from '../../types';\r\nimport type { IconSource } from '../Icon';\r\n\r\ntype Props = {\r\n  /**\r\n   * The label text of the item.\r\n   */\r\n  label: string,\r\n  /**\r\n   * Icon to display for the `DrawerItem`.\r\n   */\r\n  icon?: IconSource,\r\n  /**\r\n   * Whether to highlight the drawer item as active.\r\n   */\r\n  active?: boolean,\r\n  /**\r\n   * Function to execute on press.\r\n   */\r\n  onPress?: () => mixed,\r\n  style?: any,\r\n  /**\r\n   * @optional\r\n   */\r\n  theme: Theme,\r\n};\r\n\r\n/**\r\n * A component used to show an action item with an icon and a label in a navigation drawer.\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { Drawer } from 'react-native-paper';\r\n *\r\n * const MyComponent = () => (\r\n *   <Drawer.Item label=\"First Item\" />\r\n * );\r\n *\r\n * export default MyComponent;\r\n * ```\r\n */\r\nclass DrawerItem extends React.Component<Props> {\r\n  static displayName = 'Drawer.Item';\r\n\r\n  render() {\r\n    const { icon, label, active, theme, style, onPress, ...rest } = this.props;\r\n    const { colors, roundness } = theme;\r\n    const backgroundColor = active\r\n      ? color(colors.primary)\r\n          .alpha(0.12)\r\n          .rgb()\r\n          .string()\r\n      : 'transparent';\r\n    const contentColor = active\r\n      ? colors.primary\r\n      : color(colors.text)\r\n          .alpha(0.68)\r\n          .rgb()\r\n          .string();\r\n    const fontFamily = theme.fonts.medium;\r\n    const labelMargin = icon ? 32 : 0;\r\n\r\n    return (\r\n      <View\r\n        {...rest}\r\n        style={[\r\n          styles.container,\r\n          { backgroundColor, borderRadius: roundness },\r\n          style,\r\n        ]}\r\n      >\r\n        <TouchableRipple\r\n          borderless\r\n          delayPressIn={0}\r\n          onPress={onPress}\r\n          style={{ borderRadius: roundness }}\r\n          accessibilityTraits={active ? ['button', 'selected'] : 'button'}\r\n          accessibilityComponentType=\"button\"\r\n          accessibilityRole=\"button\"\r\n          accessibilityStates={active ? ['selected'] : undefined}\r\n        >\r\n          <View style={styles.wrapper}>\r\n            {icon ? (\r\n              <Icon source={icon} size={24} color={contentColor} />\r\n            ) : null}\r\n            <Text\r\n              numberOfLines={1}\r\n              style={[\r\n                styles.label,\r\n                {\r\n                  color: contentColor,\r\n                  fontFamily,\r\n                  marginLeft: labelMargin,\r\n                },\r\n              ]}\r\n            >\r\n              {label}\r\n            </Text>\r\n          </View>\r\n        </TouchableRipple>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    marginHorizontal: 10,\r\n    marginVertical: 4,\r\n  },\r\n  wrapper: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    padding: 8,\r\n  },\r\n  label: {\r\n    marginRight: 32,\r\n  },\r\n});\r\n\r\nexport default withTheme(DrawerItem);\r\n"]},"metadata":{},"sourceType":"module"}