{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport color from 'color';\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableRipple from \"../TouchableRipple\";\nimport Icon from \"../Icon\";\nimport Text from \"../Typography/Text\";\nimport { withTheme } from \"../../core/theming\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar ListAccordion = function (_React$Component) {\n  _inherits(ListAccordion, _React$Component);\n\n  var _super = _createSuper(ListAccordion);\n\n  function ListAccordion() {\n    var _this;\n\n    _classCallCheck(this, ListAccordion);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      expanded: false\n    };\n\n    _this._handlePress = function () {\n      return _this.setState(function (state) {\n        return {\n          expanded: !state.expanded\n        };\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ListAccordion, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          left = _this$props.left,\n          title = _this$props.title,\n          description = _this$props.description,\n          children = _this$props.children,\n          theme = _this$props.theme,\n          style = _this$props.style;\n      var titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n      var descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n      return _jsxs(View, {\n        children: [_jsx(TouchableRipple, {\n          style: [styles.container, style],\n          onPress: this._handlePress,\n          accessibilityTraits: \"button\",\n          accessibilityComponentType: \"button\",\n          accessibilityRole: \"button\",\n          children: _jsxs(View, {\n            style: styles.row,\n            pointerEvents: \"none\",\n            children: [left ? left({\n              color: this.state.expanded ? theme.colors.primary : descriptionColor\n            }) : null, _jsxs(View, {\n              style: [styles.item, styles.content],\n              children: [_jsx(Text, {\n                numberOfLines: 1,\n                style: [styles.title, {\n                  color: this.state.expanded ? theme.colors.primary : titleColor\n                }],\n                children: title\n              }), description && _jsx(Text, {\n                numberOfLines: 2,\n                style: [styles.description, {\n                  color: descriptionColor\n                }],\n                children: description\n              })]\n            }), _jsx(View, {\n              style: [styles.item, description && styles.multiline],\n              children: _jsx(Icon, {\n                source: this.state.expanded ? 'keyboard-arrow-up' : 'keyboard-arrow-down',\n                color: titleColor,\n                size: 24\n              })\n            })]\n          })\n        }), this.state.expanded ? React.Children.map(children, function (child) {\n          if (left && React.isValidElement(child) && !child.props.left && !child.props.right) {\n            return React.cloneElement(child, {\n              style: [styles.child, child.props.style]\n            });\n          }\n\n          return child;\n        }) : null]\n      });\n    }\n  }]);\n\n  return ListAccordion;\n}(React.Component);\n\nListAccordion.displayName = 'List.Accordion';\nvar styles = StyleSheet.create({\n  container: {\n    padding: 8\n  },\n  row: {\n    flexDirection: 'row'\n  },\n  multiline: {\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  title: {\n    fontSize: 16\n  },\n  description: {\n    fontSize: 14\n  },\n  item: {\n    margin: 8\n  },\n  child: {\n    paddingLeft: 64\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center'\n  }\n});\nexport default withTheme(ListAccordion);","map":{"version":3,"sources":["C:/projectpog/2022-ca326-travel-guide/MapDisplay/node_modules/react-native-paper/src/components/List/ListAccordion.js"],"names":["color","React","TouchableRipple","Icon","Text","withTheme","ListAccordion","state","expanded","_handlePress","setState","props","left","title","description","children","theme","style","titleColor","colors","text","alpha","rgb","string","descriptionColor","styles","container","row","primary","item","content","multiline","Children","map","child","isValidElement","right","cloneElement","Component","displayName","StyleSheet","create","padding","flexDirection","height","alignItems","justifyContent","fontSize","margin","paddingLeft","flex"],"mappings":"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","sourcesContent":["/* @flow */\r\n\r\nimport color from 'color';\r\nimport * as React from 'react';\r\nimport { View, StyleSheet } from 'react-native';\r\nimport TouchableRipple from '../TouchableRipple';\r\nimport Icon from '../Icon';\r\nimport Text from '../Typography/Text';\r\nimport { withTheme } from '../../core/theming';\r\nimport type { Theme } from '../../types';\r\n\r\ntype Props = {\r\n  /**\r\n   * Title text for the list accordion.\r\n   */\r\n  title: React.Node,\r\n  /**\r\n   * Description text for the list accordion.\r\n   */\r\n  description?: React.Node,\r\n  /**\r\n   * Callback which returns a React element to display on the left side.\r\n   */\r\n  left?: (props: { color: string }) => React.Node,\r\n  /**\r\n   * Content of the section.\r\n   */\r\n  children: React.Node,\r\n  /**\r\n   * @optional\r\n   */\r\n  theme: Theme,\r\n  style?: any,\r\n};\r\n\r\ntype State = {\r\n  expanded: boolean,\r\n};\r\n\r\n/**\r\n * A component used to display an expandable list item.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <img class=\"medium\" src=\"screenshots/list-accordion-1.png\" />\r\n *   <img class=\"medium\" src=\"screenshots/list-accordion-2.png\" />\r\n *   <img class=\"medium\" src=\"screenshots/list-accordion-3.png\" />\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { List, Checkbox } from 'react-native-paper';\r\n *\r\n * const MyComponent = () => (\r\n *   <List.Accordion\r\n *     title=\"Accordion\"\r\n *     left={props => <List.Icon {...props} icon=\"folder\" />}\r\n *   >\r\n *     <List.Item title=\"First item\" />\r\n *     <List.Item title=\"Second item\" />\r\n *   </List.Accordion>\r\n * );\r\n *\r\n * export default MyComponent;\r\n * ```\r\n */\r\nclass ListAccordion extends React.Component<Props, State> {\r\n  static displayName = 'List.Accordion';\r\n\r\n  state = {\r\n    expanded: false,\r\n  };\r\n\r\n  _handlePress = () =>\r\n    this.setState(state => ({\r\n      expanded: !state.expanded,\r\n    }));\r\n\r\n  render() {\r\n    const { left, title, description, children, theme, style } = this.props;\r\n    const titleColor = color(theme.colors.text)\r\n      .alpha(0.87)\r\n      .rgb()\r\n      .string();\r\n    const descriptionColor = color(theme.colors.text)\r\n      .alpha(0.54)\r\n      .rgb()\r\n      .string();\r\n\r\n    return (\r\n      <View>\r\n        <TouchableRipple\r\n          style={[styles.container, style]}\r\n          onPress={this._handlePress}\r\n          accessibilityTraits=\"button\"\r\n          accessibilityComponentType=\"button\"\r\n          accessibilityRole=\"button\"\r\n        >\r\n          <View style={styles.row} pointerEvents=\"none\">\r\n            {left\r\n              ? left({\r\n                  color: this.state.expanded\r\n                    ? theme.colors.primary\r\n                    : descriptionColor,\r\n                })\r\n              : null}\r\n            <View style={[styles.item, styles.content]}>\r\n              <Text\r\n                numberOfLines={1}\r\n                style={[\r\n                  styles.title,\r\n                  {\r\n                    color: this.state.expanded\r\n                      ? theme.colors.primary\r\n                      : titleColor,\r\n                  },\r\n                ]}\r\n              >\r\n                {title}\r\n              </Text>\r\n              {description && (\r\n                <Text\r\n                  numberOfLines={2}\r\n                  style={[\r\n                    styles.description,\r\n                    {\r\n                      color: descriptionColor,\r\n                    },\r\n                  ]}\r\n                >\r\n                  {description}\r\n                </Text>\r\n              )}\r\n            </View>\r\n            <View style={[styles.item, description && styles.multiline]}>\r\n              <Icon\r\n                source={\r\n                  this.state.expanded\r\n                    ? 'keyboard-arrow-up'\r\n                    : 'keyboard-arrow-down'\r\n                }\r\n                color={titleColor}\r\n                size={24}\r\n              />\r\n            </View>\r\n          </View>\r\n        </TouchableRipple>\r\n        {this.state.expanded\r\n          ? React.Children.map(children, child => {\r\n              if (\r\n                left &&\r\n                React.isValidElement(child) &&\r\n                !child.props.left &&\r\n                !child.props.right\r\n              ) {\r\n                return React.cloneElement(child, {\r\n                  style: [styles.child, child.props.style],\r\n                });\r\n              }\r\n\r\n              return child;\r\n            })\r\n          : null}\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    padding: 8,\r\n  },\r\n  row: {\r\n    flexDirection: 'row',\r\n  },\r\n  multiline: {\r\n    height: 40,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  title: {\r\n    fontSize: 16,\r\n  },\r\n  description: {\r\n    fontSize: 14,\r\n  },\r\n  item: {\r\n    margin: 8,\r\n  },\r\n  child: {\r\n    paddingLeft: 64,\r\n  },\r\n  content: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n  },\r\n});\r\n\r\nexport default withTheme(ListAccordion);\r\n"]},"metadata":{},"sourceType":"module"}