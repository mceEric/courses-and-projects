{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"color\", \"icon\", \"disabled\", \"onPress\", \"accessibilityLabel\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport color from 'color';\nimport { black } from \"../../styles/colors\";\nimport IconButton from \"../IconButton\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar AppbarAction = function (_React$Component) {\n  _inherits(AppbarAction, _React$Component);\n\n  var _super = _createSuper(AppbarAction);\n\n  function AppbarAction() {\n    _classCallCheck(this, AppbarAction);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(AppbarAction, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          _this$props$color = _this$props.color,\n          iconColor = _this$props$color === void 0 ? color(black).alpha(0.54).rgb().string() : _this$props$color,\n          icon = _this$props.icon,\n          disabled = _this$props.disabled,\n          onPress = _this$props.onPress,\n          accessibilityLabel = _this$props.accessibilityLabel,\n          rest = _objectWithoutProperties(_this$props, _excluded);\n\n      return _jsx(IconButton, _objectSpread({\n        onPress: onPress,\n        color: iconColor,\n        icon: icon,\n        disabled: disabled,\n        accessibilityLabel: accessibilityLabel\n      }, rest));\n    }\n  }]);\n\n  return AppbarAction;\n}(React.Component);\n\nAppbarAction.displayName = 'Appbar.Action';\nAppbarAction.defaultProps = {\n  size: 24\n};\nexport { AppbarAction as default };","map":{"version":3,"sources":["C:/projectpog/2022-ca326-travel-guide/MapDisplay/node_modules/react-native-paper/src/components/Appbar/AppbarAction.js"],"names":["React","color","black","IconButton","AppbarAction","props","iconColor","alpha","rgb","string","icon","disabled","onPress","accessibilityLabel","rest","Component","displayName","defaultProps","size"],"mappings":";;;;;;;;;;;;;;;;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT;AACA,OAAOC,UAAP;;;IAkCqBC,Y;;;;;;;;;;;;;WAOnB,kBAAS;AACP,wBAUI,KAAKC,KAVT;AAAA,0CACEJ,KADF;AAAA,UACSK,SADT,kCACqBL,KAAK,CAACC,KAAD,CAAL,CAChBK,KADgB,CACV,IADU,EAEhBC,GAFgB,GAGhBC,MAHgB,EADrB;AAAA,UAKEC,IALF,eAKEA,IALF;AAAA,UAMEC,QANF,eAMEA,QANF;AAAA,UAOEC,OAPF,eAOEA,OAPF;AAAA,UAQEC,kBARF,eAQEA,kBARF;AAAA,UASKC,IATL;;AAYA,aACE,KAAC,UAAD;AACE,QAAA,OAAO,EAAEF,OADX;AAEE,QAAA,KAAK,EAAEN,SAFT;AAGE,QAAA,IAAI,EAAEI,IAHR;AAIE,QAAA,QAAQ,EAAEC,QAJZ;AAKE,QAAA,kBAAkB,EAAEE;AALtB,SAMMC,IANN,EADF;AAUD;;;;EA9BuCd,KAAK,CAACe,S;;AAA3BX,Y,CACZY,W,GAAc,e;AADFZ,Y,CAGZa,Y,GAAe;AACpBC,EAAAA,IAAI,EAAE;AADc,C;SAHHd,Y","sourcesContent":["/* @flow */\r\n\r\nimport * as React from 'react';\r\nimport color from 'color';\r\nimport { black } from '../../styles/colors';\r\nimport IconButton from '../IconButton';\r\nimport type { IconSource } from '../Icon';\r\n\r\ntype Props = {\r\n  /**\r\n   *  Custom color for action icon.\r\n   */\r\n  color?: string,\r\n  /**\r\n   * Name of the icon to show.\r\n   */\r\n  icon: IconSource,\r\n  /**\r\n   * Optional icon size.\r\n   */\r\n  size?: number,\r\n  /**\r\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\r\n   */\r\n  disabled?: boolean,\r\n  /**\r\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\r\n   */\r\n  accessibilityLabel?: string,\r\n  /**\r\n   * Function to execute on press.\r\n   */\r\n  onPress?: () => mixed,\r\n  style?: any,\r\n};\r\n\r\n/**\r\n * A component used to display an action item in the appbar.\r\n */\r\nexport default class AppbarAction extends React.Component<Props> {\r\n  static displayName = 'Appbar.Action';\r\n\r\n  static defaultProps = {\r\n    size: 24,\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      color: iconColor = color(black)\r\n        .alpha(0.54)\r\n        .rgb()\r\n        .string(),\r\n      icon,\r\n      disabled,\r\n      onPress,\r\n      accessibilityLabel,\r\n      ...rest\r\n    } = this.props;\r\n\r\n    return (\r\n      <IconButton\r\n        onPress={onPress}\r\n        color={iconColor}\r\n        icon={icon}\r\n        disabled={disabled}\r\n        accessibilityLabel={accessibilityLabel}\r\n        {...rest}\r\n      />\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}