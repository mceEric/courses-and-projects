{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"mode\", \"disabled\", \"label\", \"error\", \"underlineColor\", \"style\", \"theme\", \"render\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport NativeTextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { polyfill } from 'react-lifecycles-compat';\nimport color from 'color';\nimport Text from \"./Typography/Text\";\nimport { withTheme } from \"../core/theming\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar AnimatedText = Animated.createAnimatedComponent(Text);\nvar MINIMIZED_LABEL_Y_OFFSET = -12;\nvar OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -29;\nvar MAXIMIZED_LABEL_FONT_SIZE = 16;\nvar MINIMIZED_LABEL_FONT_SIZE = 12;\nvar LABEL_WIGGLE_X_OFFSET = 4;\nvar FOCUS_ANIMATION_DURATION = 150;\nvar BLUR_ANIMATION_DURATION = 180;\n\nvar TextInput = function (_React$Component) {\n  _inherits(TextInput, _React$Component);\n\n  var _super = _createSuper(TextInput);\n\n  function TextInput() {\n    var _this;\n\n    _classCallCheck(this, TextInput);\n\n    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n      _args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(_args));\n    _this.state = {\n      labeled: new Animated.Value(_this.props.value ? 0 : 1),\n      error: new Animated.Value(_this.props.error ? 1 : 0),\n      focused: false,\n      placeholder: '',\n      value: _this.props.value,\n      labelLayout: {\n        measured: false,\n        width: 0\n      }\n    };\n\n    _this._showPlaceholder = function () {\n      clearTimeout(_this._timer);\n      _this._timer = setTimeout(function () {\n        return _this.setState({\n          placeholder: _this.props.placeholder\n        });\n      }, 50);\n    };\n\n    _this._hidePlaceholder = function () {\n      return _this.setState({\n        placeholder: ''\n      });\n    };\n\n    _this._showError = function () {\n      Animated.timing(_this.state.error, {\n        toValue: 1,\n        duration: FOCUS_ANIMATION_DURATION,\n        useNativeDriver: true\n      }).start(_this._showPlaceholder);\n    };\n\n    _this._hideError = function () {\n      Animated.timing(_this.state.error, {\n        toValue: 0,\n        duration: BLUR_ANIMATION_DURATION,\n        useNativeDriver: true\n      }).start();\n    };\n\n    _this._restoreLabel = function () {\n      return Animated.timing(_this.state.labeled, {\n        toValue: 1,\n        duration: FOCUS_ANIMATION_DURATION,\n        useNativeDriver: true\n      }).start();\n    };\n\n    _this._minmizeLabel = function () {\n      return Animated.timing(_this.state.labeled, {\n        toValue: 0,\n        duration: BLUR_ANIMATION_DURATION,\n        useNativeDriver: true\n      }).start();\n    };\n\n    _this._handleFocus = function () {\n      if (_this.props.disabled) {\n        return;\n      }\n\n      _this.setState({\n        focused: true\n      });\n\n      if (_this.props.onFocus) {\n        var _this$props;\n\n        (_this$props = _this.props).onFocus.apply(_this$props, arguments);\n      }\n    };\n\n    _this._handleBlur = function () {\n      if (_this.props.disabled) {\n        return;\n      }\n\n      _this.setState({\n        focused: false\n      });\n\n      if (_this.props.onBlur) {\n        var _this$props2;\n\n        (_this$props2 = _this.props).onBlur.apply(_this$props2, arguments);\n      }\n    };\n\n    _this._handleChangeText = function (value) {\n      _this.setState({\n        value: value\n      });\n\n      _this.props.onChangeText && _this.props.onChangeText(value);\n    };\n\n    return _this;\n  }\n\n  _createClass(TextInput, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevState.focused !== this.state.focused || prevState.value !== this.state.value) {\n        if (this.state.value || this.state.focused) {\n          this._minmizeLabel();\n        } else {\n          this._restoreLabel();\n        }\n      }\n\n      if (prevState.focused !== this.state.focused || prevProps.label !== this.props.label) {\n        if (this.state.focused || !this.props.label) {\n          this._showPlaceholder();\n        } else {\n          this._hidePlaceholder();\n        }\n      }\n\n      if (prevProps.error !== this.props.error) {\n        if (this.props.error) {\n          this._showError();\n        } else {\n          this._hideError();\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearTimeout(this._timer);\n    }\n  }, {\n    key: \"setNativeProps\",\n    value: function setNativeProps() {\n      var _this$_root;\n\n      return this._root && (_this$_root = this._root).setNativeProps.apply(_this$_root, arguments);\n    }\n  }, {\n    key: \"isFocused\",\n    value: function isFocused() {\n      return this._root && this._root.isFocused();\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      return this._root && this._root.clear();\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      return this._root && this._root.focus();\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      return this._root && this._root.blur();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props3 = this.props,\n          mode = _this$props3.mode,\n          disabled = _this$props3.disabled,\n          label = _this$props3.label,\n          error = _this$props3.error,\n          underlineColor = _this$props3.underlineColor,\n          style = _this$props3.style,\n          theme = _this$props3.theme,\n          render = _this$props3.render,\n          rest = _objectWithoutProperties(_this$props3, _excluded);\n\n      var colors = theme.colors,\n          fonts = theme.fonts;\n      var fontFamily = fonts.regular;\n\n      var _ref = StyleSheet.flatten(style) || {},\n          _ref$backgroundColor = _ref.backgroundColor,\n          backgroundColor = _ref$backgroundColor === void 0 ? colors.background : _ref$backgroundColor;\n\n      var inputTextColor, activeColor, underlineColorCustom, outlineColor, placeholderColor, containerStyle;\n\n      if (disabled) {\n        inputTextColor = activeColor = color(colors.text).alpha(0.54).rgb().string();\n        placeholderColor = outlineColor = colors.disabled;\n        underlineColorCustom = 'transparent';\n      } else {\n        inputTextColor = colors.text;\n        activeColor = error ? colors.error : colors.primary;\n        placeholderColor = outlineColor = colors.placeholder;\n        underlineColorCustom = underlineColor || colors.disabled;\n      }\n\n      if (mode === 'flat') {\n        containerStyle = {\n          backgroundColor: theme.dark ? color(colors.background).lighten(0.24).rgb().string() : color(colors.background).darken(0.06).rgb().string(),\n          borderTopLeftRadius: theme.roundness,\n          borderTopRightRadius: theme.roundness\n        };\n      }\n\n      var labelStyle = {\n        fontFamily: fontFamily,\n        fontSize: MAXIMIZED_LABEL_FONT_SIZE,\n        transform: [{\n          translateX: this.state.error.interpolate({\n            inputRange: [0, 0.5, 1],\n            outputRange: [0, this.state.value && error ? LABEL_WIGGLE_X_OFFSET : 0, 0]\n          })\n        }, {\n          translateY: this.state.labeled.interpolate({\n            inputRange: [0, 1],\n            outputRange: [mode === 'outlined' ? OUTLINE_MINIMIZED_LABEL_Y_OFFSET : MINIMIZED_LABEL_Y_OFFSET, 0]\n          })\n        }, {\n          scale: this.state.labeled.interpolate({\n            inputRange: [0, 1],\n            outputRange: [MINIMIZED_LABEL_FONT_SIZE / MAXIMIZED_LABEL_FONT_SIZE, 1]\n          })\n        }, {\n          translateX: this.state.labeled.interpolate({\n            inputRange: [0, 1],\n            outputRange: [-(1 - MINIMIZED_LABEL_FONT_SIZE / MAXIMIZED_LABEL_FONT_SIZE) * (this.state.labelLayout.width / 2), 0]\n          })\n        }]\n      };\n      return _jsxs(View, {\n        style: [containerStyle, style],\n        children: [mode === 'outlined' ? _jsx(View, {\n          style: [styles.outline, {\n            borderRadius: theme.roundness,\n            borderWidth: this.state.focused ? 2 : 1,\n            borderColor: this.state.focused ? activeColor : outlineColor\n          }]\n        }) : null, mode === 'outlined' && label ? _jsx(AnimatedText, {\n          pointerEvents: \"none\",\n          style: [styles.outlinedLabelBackground, {\n            backgroundColor: backgroundColor,\n            fontFamily: fontFamily,\n            fontSize: MINIMIZED_LABEL_FONT_SIZE,\n            opacity: this.state.labeled.interpolate({\n              inputRange: [0, 0.9, 1],\n              outputRange: [1, 1, 0]\n            }),\n            transform: [{\n              scaleX: this.state.labeled.interpolate({\n                inputRange: [0, 1],\n                outputRange: [1, 0]\n              })\n            }]\n          }],\n          numberOfLines: 1,\n          children: label\n        }) : null, mode === 'flat' ? _jsx(Animated.View, {\n          style: [styles.underline, {\n            backgroundColor: error ? colors.error : this.state.focused ? activeColor : underlineColorCustom,\n            transform: [{\n              scaleY: this.state.focused ? 1 : 0.5\n            }]\n          }]\n        }) : null, label ? _jsxs(View, {\n          pointerEvents: \"none\",\n          style: [StyleSheet.absoluteFill, {\n            opacity: this.state.value || this.state.focused ? this.state.labelLayout.measured ? 1 : 0 : 1\n          }],\n          children: [_jsx(AnimatedText, {\n            onLayout: function onLayout(e) {\n              return _this2.setState({\n                labelLayout: {\n                  width: e.nativeEvent.layout.width,\n                  measured: true\n                }\n              });\n            },\n            style: [styles.placeholder, mode === 'outlined' ? styles.placeholderOutlined : styles.placeholderFlat, labelStyle, {\n              color: activeColor,\n              opacity: this.state.labeled.interpolate({\n                inputRange: [0, 1],\n                outputRange: [this.state.focused ? 1 : 0, 0]\n              })\n            }],\n            numberOfLines: 1,\n            children: label\n          }), _jsx(AnimatedText, {\n            style: [styles.placeholder, mode === 'outlined' ? styles.placeholderOutlined : styles.placeholderFlat, labelStyle, {\n              color: placeholderColor,\n              opacity: this.state.focused ? this.state.labeled : 1\n            }],\n            numberOfLines: 1,\n            children: label\n          })]\n        }) : null, render(_objectSpread(_objectSpread({}, rest), {}, {\n          ref: function ref(c) {\n            _this2._root = c;\n          },\n          onChangeText: this._handleChangeText,\n          placeholder: label ? this.state.placeholder : this.props.placeholder,\n          placeholderTextColor: placeholderColor,\n          editable: !disabled,\n          selectionColor: activeColor,\n          onFocus: this._handleFocus,\n          onBlur: this._handleBlur,\n          underlineColorAndroid: 'transparent',\n          style: [styles.input, mode === 'outlined' ? styles.inputOutlined : this.props.label ? styles.inputFlatWithLabel : styles.inputFlatWithoutLabel, {\n            color: inputTextColor,\n            fontFamily: fontFamily\n          }]\n        }))]\n      });\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      return {\n        value: typeof nextProps.value !== 'undefined' ? nextProps.value : prevState.value\n      };\n    }\n  }]);\n\n  return TextInput;\n}(React.Component);\n\nTextInput.defaultProps = {\n  mode: 'flat',\n  disabled: false,\n  error: false,\n  multiline: false,\n  render: function render(props) {\n    return _jsx(NativeTextInput, _objectSpread({}, props));\n  }\n};\npolyfill(TextInput);\nexport default withTheme(TextInput);\nvar styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    fontSize: 16,\n    paddingHorizontal: 12\n  },\n  placeholderFlat: {\n    top: 19\n  },\n  placeholderOutlined: {\n    top: 25\n  },\n  underline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    height: 2\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0\n  },\n  outlinedLabelBackground: {\n    position: 'absolute',\n    top: 0,\n    left: 8,\n    paddingHorizontal: 4,\n    color: 'transparent'\n  },\n  input: {\n    paddingHorizontal: 12,\n    fontSize: 16,\n    margin: 0,\n    minHeight: 58,\n    textAlign: I18nManager.isRTL ? 'right' : 'left'\n  },\n  inputOutlined: {\n    paddingTop: 20,\n    paddingBottom: 16,\n    minHeight: 64\n  },\n  inputFlatWithLabel: {\n    paddingTop: 24,\n    paddingBottom: 6\n  },\n  inputFlatWithoutLabel: {\n    paddingVertical: 15\n  }\n});","map":{"version":3,"sources":["C:/projectpog/2022-ca326-travel-guide/MapDisplay/node_modules/react-native-paper/src/components/TextInput.js"],"names":["React","polyfill","color","Text","withTheme","AnimatedText","Animated","createAnimatedComponent","MINIMIZED_LABEL_Y_OFFSET","OUTLINE_MINIMIZED_LABEL_Y_OFFSET","MAXIMIZED_LABEL_FONT_SIZE","MINIMIZED_LABEL_FONT_SIZE","LABEL_WIGGLE_X_OFFSET","FOCUS_ANIMATION_DURATION","BLUR_ANIMATION_DURATION","TextInput","state","labeled","Value","props","value","error","focused","placeholder","labelLayout","measured","width","_showPlaceholder","clearTimeout","_timer","setTimeout","setState","_hidePlaceholder","_showError","timing","toValue","duration","useNativeDriver","start","_hideError","_restoreLabel","_minmizeLabel","_handleFocus","disabled","onFocus","_handleBlur","onBlur","_handleChangeText","onChangeText","prevProps","prevState","label","_root","setNativeProps","isFocused","clear","focus","blur","mode","underlineColor","style","theme","render","rest","colors","fonts","fontFamily","regular","StyleSheet","flatten","backgroundColor","background","inputTextColor","activeColor","underlineColorCustom","outlineColor","placeholderColor","containerStyle","text","alpha","rgb","string","primary","dark","lighten","darken","borderTopLeftRadius","roundness","borderTopRightRadius","labelStyle","fontSize","transform","translateX","interpolate","inputRange","outputRange","translateY","scale","styles","outline","borderRadius","borderWidth","borderColor","outlinedLabelBackground","opacity","scaleX","underline","scaleY","absoluteFill","e","nativeEvent","layout","placeholderOutlined","placeholderFlat","ref","c","placeholderTextColor","editable","selectionColor","underlineColorAndroid","input","inputOutlined","inputFlatWithLabel","inputFlatWithoutLabel","nextProps","Component","defaultProps","multiline","create","position","left","paddingHorizontal","top","right","bottom","height","margin","minHeight","textAlign","I18nManager","isRTL","paddingTop","paddingBottom","paddingVertical"],"mappings":"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","sourcesContent":["/* @flow */\r\n\r\nimport * as React from 'react';\r\nimport {\r\n  View,\r\n  Animated,\r\n  TextInput as NativeTextInput,\r\n  StyleSheet,\r\n  I18nManager,\r\n} from 'react-native';\r\nimport { polyfill } from 'react-lifecycles-compat';\r\nimport color from 'color';\r\nimport Text from './Typography/Text';\r\nimport { withTheme } from '../core/theming';\r\nimport type { Theme } from '../types';\r\n\r\nconst AnimatedText = Animated.createAnimatedComponent(Text);\r\n\r\nconst MINIMIZED_LABEL_Y_OFFSET = -12;\r\nconst OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -29;\r\nconst MAXIMIZED_LABEL_FONT_SIZE = 16;\r\nconst MINIMIZED_LABEL_FONT_SIZE = 12;\r\nconst LABEL_WIGGLE_X_OFFSET = 4;\r\nconst FOCUS_ANIMATION_DURATION = 150;\r\nconst BLUR_ANIMATION_DURATION = 180;\r\n\r\ntype RenderProps = {\r\n  ref: any => void,\r\n  onChangeText: string => void,\r\n  placeholder: ?string,\r\n  placeholderTextColor: string,\r\n  editable?: boolean,\r\n  selectionColor: string,\r\n  onFocus: () => mixed,\r\n  onBlur: () => mixed,\r\n  underlineColorAndroid: string,\r\n  style: any,\r\n  multiline?: boolean,\r\n  numberOfLines?: number,\r\n  value?: string,\r\n};\r\n\r\ntype Props = {\r\n  /**\r\n   * Mode of the TextInput.\r\n   * - `flat` - flat input with an underline.\r\n   * - `outlined` - input with an outline.\r\n   *\r\n   * In `outlined` mode, the background color of the label is derived from `colors.background` in theme or the `backgroundColor` style.\r\n   */\r\n  mode?: 'flat' | 'outlined',\r\n  /**\r\n   * If true, user won't be able to interact with the component.\r\n   */\r\n  disabled?: boolean,\r\n  /**\r\n   * The text to use for the floating label.\r\n   */\r\n  label?: string,\r\n  /**\r\n   * Placeholder for the input.\r\n   */\r\n  placeholder?: string,\r\n  /**\r\n   * Whether to style the TextInput with error style.\r\n   */\r\n  error?: boolean,\r\n  /**\r\n   * Callback that is called when the text input's text changes. Changed text is passed as an argument to the callback handler.\r\n   */\r\n  onChangeText?: Function,\r\n  /**\r\n   * Underline color of the input.\r\n   */\r\n  underlineColor?: string,\r\n  /**\r\n   * Whether the input can have multiple lines.\r\n   */\r\n  multiline?: boolean,\r\n  /**\r\n   * The number of lines to show in the input (Android only).\r\n   */\r\n  numberOfLines?: number,\r\n  /**\r\n   * Callback that is called when the text input is focused.\r\n   */\r\n  onFocus?: () => mixed,\r\n  /**\r\n   * Callback that is called when the text input is blurred.\r\n   */\r\n  onBlur?: () => mixed,\r\n  /**\r\n   *\r\n   * Callback to render a custom input component such as `react-native-text-input-mask`\r\n   * instead of the default `TextInput` component from `react-native`.\r\n   *\r\n   * Example:\r\n   * ```js\r\n   * <TextInput\r\n   *   label=\"Phone number\"\r\n   *   render={props =>\r\n   *     <TextInputMask\r\n   *       {...props}\r\n   *       mask=\"+[00] [000] [000] [000]\"\r\n   *     />\r\n   *   }\r\n   * />\r\n   * ```\r\n   */\r\n  render: (props: RenderProps) => React.Node,\r\n  /**\r\n   * Value of the text input.\r\n   */\r\n  value?: string,\r\n  style?: any,\r\n  /**\r\n   * @optional\r\n   */\r\n  theme: Theme,\r\n};\r\n\r\ntype State = {\r\n  labeled: Animated.Value,\r\n  error: Animated.Value,\r\n  focused: boolean,\r\n  placeholder: ?string,\r\n  value: ?string,\r\n  labelLayout: {\r\n    measured: boolean,\r\n    width: number,\r\n  },\r\n};\r\n\r\n/**\r\n * A component to allow users to input text.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <figure>\r\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.focused.png\" />\r\n *     <figcaption>Flat (focused)</figcaption>\r\n *   </figure>\r\n *   <figure>\r\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.disabled.png\" />\r\n *     <figcaption>Flat (disabled)</figcaption>\r\n *   </figure>\r\n *   <figure>\r\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.focused.png\" />\r\n *     <figcaption>Outlined (focused)</figcaption>\r\n *   </figure>\r\n *   <figure>\r\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.disabled.png\" />\r\n *     <figcaption>Outlined (disabled)</figcaption>\r\n *   </figure>\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { TextInput } from 'react-native-paper';\r\n *\r\n * export default class MyComponent extends React.Component {\r\n *   state = {\r\n *     text: ''\r\n *   };\r\n *\r\n *   render(){\r\n *     return (\r\n *       <TextInput\r\n *         label='Email'\r\n *         value={this.state.text}\r\n *         onChangeText={text => this.setState({ text })}\r\n *       />\r\n *     );\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * @extends TextInput props https://facebook.github.io/react-native/docs/textinput.html#props\r\n */\r\n\r\nclass TextInput extends React.Component<Props, State> {\r\n  static defaultProps = {\r\n    mode: 'flat',\r\n    disabled: false,\r\n    error: false,\r\n    multiline: false,\r\n    render: props => <NativeTextInput {...props} />,\r\n  };\r\n\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    return {\r\n      value:\r\n        typeof nextProps.value !== 'undefined'\r\n          ? nextProps.value\r\n          : prevState.value,\r\n    };\r\n  }\r\n\r\n  state = {\r\n    labeled: new Animated.Value(this.props.value ? 0 : 1),\r\n    error: new Animated.Value(this.props.error ? 1 : 0),\r\n    focused: false,\r\n    placeholder: '',\r\n    value: this.props.value,\r\n    labelLayout: {\r\n      measured: false,\r\n      width: 0,\r\n    },\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (\r\n      prevState.focused !== this.state.focused ||\r\n      prevState.value !== this.state.value\r\n    ) {\r\n      // The label should be minimized if the text input is focused, or has text\r\n      // In minimized mode, the label moves up and becomes small\r\n      if (this.state.value || this.state.focused) {\r\n        this._minmizeLabel();\r\n      } else {\r\n        this._restoreLabel();\r\n      }\r\n    }\r\n\r\n    if (\r\n      prevState.focused !== this.state.focused ||\r\n      prevProps.label !== this.props.label\r\n    ) {\r\n      // Show placeholder text only if the input is focused or there's no label\r\n      // We don't show placeholder if there's a label because the label acts as placeholder\r\n      // When focused, the label moves up, so we can show a placeholder\r\n      if (this.state.focused || !this.props.label) {\r\n        this._showPlaceholder();\r\n      } else {\r\n        this._hidePlaceholder();\r\n      }\r\n    }\r\n\r\n    if (prevProps.error !== this.props.error) {\r\n      // When the input has an error, we wiggle the label and apply error styles\r\n      if (this.props.error) {\r\n        this._showError();\r\n      } else {\r\n        this._hideError();\r\n      }\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearTimeout(this._timer);\r\n  }\r\n\r\n  _showPlaceholder = () => {\r\n    clearTimeout(this._timer);\r\n\r\n    // Set the placeholder in a delay to offset the label animation\r\n    // If we show it immediately, they'll overlap and look ugly\r\n    this._timer = setTimeout(\r\n      () =>\r\n        this.setState({\r\n          placeholder: this.props.placeholder,\r\n        }),\r\n      50\r\n    );\r\n  };\r\n\r\n  _hidePlaceholder = () =>\r\n    this.setState({\r\n      placeholder: '',\r\n    });\r\n\r\n  _timer: TimeoutID;\r\n  _root: ?NativeTextInput;\r\n\r\n  _showError = () => {\r\n    Animated.timing(this.state.error, {\r\n      toValue: 1,\r\n      duration: FOCUS_ANIMATION_DURATION,\r\n      useNativeDriver: true,\r\n    }).start(this._showPlaceholder);\r\n  };\r\n\r\n  _hideError = () => {\r\n    Animated.timing(this.state.error, {\r\n      toValue: 0,\r\n      duration: BLUR_ANIMATION_DURATION,\r\n      useNativeDriver: true,\r\n    }).start();\r\n  };\r\n\r\n  _restoreLabel = () =>\r\n    Animated.timing(this.state.labeled, {\r\n      toValue: 1,\r\n      duration: FOCUS_ANIMATION_DURATION,\r\n      useNativeDriver: true,\r\n    }).start();\r\n\r\n  _minmizeLabel = () =>\r\n    Animated.timing(this.state.labeled, {\r\n      toValue: 0,\r\n      duration: BLUR_ANIMATION_DURATION,\r\n      useNativeDriver: true,\r\n    }).start();\r\n\r\n  _handleFocus = (...args) => {\r\n    if (this.props.disabled) {\r\n      return;\r\n    }\r\n\r\n    this.setState({ focused: true });\r\n\r\n    if (this.props.onFocus) {\r\n      this.props.onFocus(...args);\r\n    }\r\n  };\r\n\r\n  _handleBlur = (...args) => {\r\n    if (this.props.disabled) {\r\n      return;\r\n    }\r\n\r\n    this.setState({ focused: false });\r\n\r\n    if (this.props.onBlur) {\r\n      this.props.onBlur(...args);\r\n    }\r\n  };\r\n\r\n  _handleChangeText = (value: string) => {\r\n    this.setState({ value });\r\n    this.props.onChangeText && this.props.onChangeText(value);\r\n  };\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  setNativeProps(...args) {\r\n    return this._root && this._root.setNativeProps(...args);\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if the input is currently focused, `false` otherwise.\r\n   */\r\n  isFocused() {\r\n    return this._root && this._root.isFocused();\r\n  }\r\n\r\n  /**\r\n   * Removes all text from the TextInput.\r\n   */\r\n  clear() {\r\n    return this._root && this._root.clear();\r\n  }\r\n\r\n  /**\r\n   * Focuses the input.\r\n   */\r\n  focus() {\r\n    return this._root && this._root.focus();\r\n  }\r\n\r\n  /**\r\n   * Removes focus from the input.\r\n   */\r\n  blur() {\r\n    return this._root && this._root.blur();\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      mode,\r\n      disabled,\r\n      label,\r\n      error,\r\n      underlineColor,\r\n      style,\r\n      theme,\r\n      render,\r\n      ...rest\r\n    } = this.props;\r\n\r\n    const { colors, fonts } = theme;\r\n    const fontFamily = fonts.regular;\r\n    const { backgroundColor = colors.background } =\r\n      StyleSheet.flatten(style) || {};\r\n\r\n    let inputTextColor,\r\n      activeColor,\r\n      underlineColorCustom,\r\n      outlineColor,\r\n      placeholderColor,\r\n      containerStyle;\r\n\r\n    if (disabled) {\r\n      inputTextColor = activeColor = color(colors.text)\r\n        .alpha(0.54)\r\n        .rgb()\r\n        .string();\r\n      placeholderColor = outlineColor = colors.disabled;\r\n      underlineColorCustom = 'transparent';\r\n    } else {\r\n      inputTextColor = colors.text;\r\n      activeColor = error ? colors.error : colors.primary;\r\n      placeholderColor = outlineColor = colors.placeholder;\r\n      underlineColorCustom = underlineColor || colors.disabled;\r\n    }\r\n\r\n    if (mode === 'flat') {\r\n      containerStyle = {\r\n        backgroundColor: theme.dark\r\n          ? color(colors.background)\r\n              .lighten(0.24)\r\n              .rgb()\r\n              .string()\r\n          : color(colors.background)\r\n              .darken(0.06)\r\n              .rgb()\r\n              .string(),\r\n        borderTopLeftRadius: theme.roundness,\r\n        borderTopRightRadius: theme.roundness,\r\n      };\r\n    }\r\n\r\n    const labelStyle = {\r\n      fontFamily,\r\n      fontSize: MAXIMIZED_LABEL_FONT_SIZE,\r\n      transform: [\r\n        {\r\n          // Wiggle the label when there's an error\r\n          translateX: this.state.error.interpolate({\r\n            inputRange: [0, 0.5, 1],\r\n            outputRange: [\r\n              0,\r\n              this.state.value && error ? LABEL_WIGGLE_X_OFFSET : 0,\r\n              0,\r\n            ],\r\n          }),\r\n        },\r\n        {\r\n          // Move label to top\r\n          translateY: this.state.labeled.interpolate({\r\n            inputRange: [0, 1],\r\n            outputRange: [\r\n              mode === 'outlined'\r\n                ? OUTLINE_MINIMIZED_LABEL_Y_OFFSET\r\n                : MINIMIZED_LABEL_Y_OFFSET,\r\n              0,\r\n            ],\r\n          }),\r\n        },\r\n        {\r\n          // Make label smaller\r\n          scale: this.state.labeled.interpolate({\r\n            inputRange: [0, 1],\r\n            outputRange: [\r\n              MINIMIZED_LABEL_FONT_SIZE / MAXIMIZED_LABEL_FONT_SIZE,\r\n              1,\r\n            ],\r\n          }),\r\n        },\r\n        {\r\n          // Offset label scale since RN doesn't support transform origin\r\n          translateX: this.state.labeled.interpolate({\r\n            inputRange: [0, 1],\r\n            outputRange: [\r\n              -(1 - MINIMIZED_LABEL_FONT_SIZE / MAXIMIZED_LABEL_FONT_SIZE) *\r\n                (this.state.labelLayout.width / 2),\r\n              0,\r\n            ],\r\n          }),\r\n        },\r\n      ],\r\n    };\r\n\r\n    return (\r\n      <View style={[containerStyle, style]}>\r\n        {mode === 'outlined' ? (\r\n          // Render the outline separately from the container\r\n          // This is so that the label can overlap the outline\r\n          // Otherwise the border will cut off the label on Android\r\n          <View\r\n            style={[\r\n              styles.outline,\r\n              {\r\n                borderRadius: theme.roundness,\r\n                borderWidth: this.state.focused ? 2 : 1,\r\n                borderColor: this.state.focused ? activeColor : outlineColor,\r\n              },\r\n            ]}\r\n          />\r\n        ) : null}\r\n\r\n        {mode === 'outlined' && label ? (\r\n          // When mode == 'outlined', the input label stays on top of the outline\r\n          // The background of the label covers the outline so it looks cut off\r\n          // To achieve the effect, we position the actual label with a background on top of it\r\n          // We set the color of the text to transparent so only the background is visible\r\n          <AnimatedText\r\n            pointerEvents=\"none\"\r\n            style={[\r\n              styles.outlinedLabelBackground,\r\n              {\r\n                backgroundColor,\r\n                fontFamily,\r\n                fontSize: MINIMIZED_LABEL_FONT_SIZE,\r\n                // Hide the background when scale will be 0\r\n                // There's a bug in RN which makes scale: 0 act weird\r\n                opacity: this.state.labeled.interpolate({\r\n                  inputRange: [0, 0.9, 1],\r\n                  outputRange: [1, 1, 0],\r\n                }),\r\n                transform: [\r\n                  {\r\n                    // Animate the scale when label is moved up\r\n                    scaleX: this.state.labeled.interpolate({\r\n                      inputRange: [0, 1],\r\n                      outputRange: [1, 0],\r\n                    }),\r\n                  },\r\n                ],\r\n              },\r\n            ]}\r\n            numberOfLines={1}\r\n          >\r\n            {label}\r\n          </AnimatedText>\r\n        ) : null}\r\n\r\n        {mode === 'flat' ? (\r\n          // When mode === 'flat', render an underline\r\n          <Animated.View\r\n            style={[\r\n              styles.underline,\r\n              {\r\n                backgroundColor: error\r\n                  ? colors.error\r\n                  : this.state.focused\r\n                    ? activeColor\r\n                    : underlineColorCustom,\r\n                // Underlines is thinner when input is not focused\r\n                transform: [{ scaleY: this.state.focused ? 1 : 0.5 }],\r\n              },\r\n            ]}\r\n          />\r\n        ) : null}\r\n\r\n        {label ? (\r\n          // Position colored placeholder and gray placeholder on top of each other and crossfade them\r\n          // This gives the effect of animating the color, but allows us to use native driver\r\n          <View\r\n            pointerEvents=\"none\"\r\n            style={[\r\n              StyleSheet.absoluteFill,\r\n              {\r\n                opacity:\r\n                  // Hide the label in minimized state until we measure it's width\r\n                  this.state.value || this.state.focused\r\n                    ? this.state.labelLayout.measured\r\n                      ? 1\r\n                      : 0\r\n                    : 1,\r\n              },\r\n            ]}\r\n          >\r\n            <AnimatedText\r\n              onLayout={e =>\r\n                this.setState({\r\n                  labelLayout: {\r\n                    width: e.nativeEvent.layout.width,\r\n                    measured: true,\r\n                  },\r\n                })\r\n              }\r\n              style={[\r\n                styles.placeholder,\r\n                mode === 'outlined'\r\n                  ? styles.placeholderOutlined\r\n                  : styles.placeholderFlat,\r\n                labelStyle,\r\n                {\r\n                  color: activeColor,\r\n                  opacity: this.state.labeled.interpolate({\r\n                    inputRange: [0, 1],\r\n                    outputRange: [this.state.focused ? 1 : 0, 0],\r\n                  }),\r\n                },\r\n              ]}\r\n              numberOfLines={1}\r\n            >\r\n              {label}\r\n            </AnimatedText>\r\n            <AnimatedText\r\n              style={[\r\n                styles.placeholder,\r\n                mode === 'outlined'\r\n                  ? styles.placeholderOutlined\r\n                  : styles.placeholderFlat,\r\n                labelStyle,\r\n                {\r\n                  color: placeholderColor,\r\n                  opacity: this.state.focused ? this.state.labeled : 1,\r\n                },\r\n              ]}\r\n              numberOfLines={1}\r\n            >\r\n              {label}\r\n            </AnimatedText>\r\n          </View>\r\n        ) : null}\r\n\r\n        {render({\r\n          ...rest,\r\n          ref: c => {\r\n            this._root = c;\r\n          },\r\n          onChangeText: this._handleChangeText,\r\n          placeholder: label ? this.state.placeholder : this.props.placeholder,\r\n          placeholderTextColor: placeholderColor,\r\n          editable: !disabled,\r\n          selectionColor: activeColor,\r\n          onFocus: this._handleFocus,\r\n          onBlur: this._handleBlur,\r\n          underlineColorAndroid: 'transparent',\r\n          style: [\r\n            styles.input,\r\n            mode === 'outlined'\r\n              ? styles.inputOutlined\r\n              : this.props.label\r\n                ? styles.inputFlatWithLabel\r\n                : styles.inputFlatWithoutLabel,\r\n            {\r\n              color: inputTextColor,\r\n              fontFamily,\r\n            },\r\n          ],\r\n        })}\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\npolyfill(TextInput);\r\n\r\nexport default withTheme(TextInput);\r\n\r\nconst styles = StyleSheet.create({\r\n  placeholder: {\r\n    position: 'absolute',\r\n    left: 0,\r\n    fontSize: 16,\r\n    paddingHorizontal: 12,\r\n  },\r\n  placeholderFlat: {\r\n    top: 19,\r\n  },\r\n  placeholderOutlined: {\r\n    top: 25,\r\n  },\r\n  underline: {\r\n    position: 'absolute',\r\n    left: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n    height: 2,\r\n  },\r\n  outline: {\r\n    position: 'absolute',\r\n    left: 0,\r\n    right: 0,\r\n    top: 6,\r\n    bottom: 0,\r\n  },\r\n  outlinedLabelBackground: {\r\n    position: 'absolute',\r\n    top: 0,\r\n    left: 8,\r\n    paddingHorizontal: 4,\r\n    color: 'transparent',\r\n  },\r\n  input: {\r\n    paddingHorizontal: 12,\r\n    fontSize: 16,\r\n    margin: 0,\r\n    minHeight: 58,\r\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\r\n  },\r\n  inputOutlined: {\r\n    paddingTop: 20,\r\n    paddingBottom: 16,\r\n    minHeight: 64,\r\n  },\r\n  inputFlatWithLabel: {\r\n    paddingTop: 24,\r\n    paddingBottom: 6,\r\n  },\r\n  inputFlatWithoutLabel: {\r\n    paddingVertical: 15,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}