{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect, useLayoutEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { auth, chatDatabase, realtimeDatabase } from \"../firebase\";\nimport { GiftedChat, Bubble, Send, SystemMessage } from 'react-native-gifted-chat';\nimport { IconButton } from 'react-native-paper';\nimport { useNavigation } from \"@react-navigation/native\";\nimport { Icon } from \"react-native-elements\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function ChatScreen(_ref) {\n  var route = _ref.route;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      messages = _useState2[0],\n      setMessages = _useState2[1];\n\n  var chatName = route.params.chatName;\n  var navigation = useNavigation();\n  var node = realtimeDatabase.ref(\"users\");\n  var locationCheck = false;\n  node.child(auth.currentUser.displayName).child(\"sharedLocations\").once('value', function (snapshot) {\n    if (snapshot.hasChild(chatName.friendName)) {\n      locationCheck = true;\n    }\n  });\n\n  var _useState3 = useState(locationCheck),\n      _useState4 = _slicedToArray(_useState3, 2),\n      render = _useState4[0],\n      setRender = _useState4[1];\n\n  function handleSend(messages) {\n    var text;\n    return _regeneratorRuntime.async(function handleSend$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            text = messages[0].text;\n            chatDatabase.collection('Chatroom').doc(chatName.serverName).collection('chats').add({\n              text: text,\n              createdAt: new Date().getTime(),\n              user: {\n                _id: auth.currentUser.uid,\n                email: auth.currentUser.email\n              }\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  useLayoutEffect(function () {\n    render === true ? navigation.setOptions({\n      headerRight: function headerRight() {\n        return _jsx(TouchableOpacity, {\n          style: {\n            marginRight: 30\n          },\n          onPress: function onPress() {\n            return removeFriendLocation();\n          },\n          children: _jsx(Icon, {\n            name: \"location-pin\",\n            color: \"#daa520\"\n          })\n        });\n      }\n    }) : navigation.setOptions({\n      headerRight: function headerRight() {\n        return _jsx(TouchableOpacity, {\n          style: {\n            marginRight: 30\n          },\n          onPress: function onPress() {\n            return getFriendLocation();\n          },\n          children: _jsx(Icon, {\n            name: \"location-pin\",\n            color: \"black\"\n          })\n        });\n      }\n    });\n  }, [render]);\n  useEffect(function () {\n    var messagesListener = chatDatabase.collection('Chatroom').doc(chatName.serverName).collection('chats').orderBy('createdAt', 'desc').onSnapshot(function (querySnapshot) {\n      var messages = querySnapshot.docs.map(function (doc) {\n        var firebaseData = doc.data();\n\n        var data = _objectSpread({\n          _id: doc.id,\n          text: '',\n          createdAt: new Date().getTime()\n        }, firebaseData);\n\n        if (!firebaseData.system) {\n          data.user = _objectSpread(_objectSpread({}, firebaseData.user), {}, {\n            name: firebaseData.user.email\n          });\n        }\n\n        return data;\n      });\n      setMessages(messages);\n    });\n    return function () {\n      return messagesListener();\n    };\n  }, []);\n\n  function getFriendLocation() {\n    node.child(auth.currentUser.displayName).child(\"sharedLocations\").child(chatName.friendName).set({\n      isLocationShared: true\n    });\n    setRender(!render);\n  }\n\n  function removeFriendLocation() {\n    node.child(auth.currentUser.displayName).child(\"sharedLocations\").child(chatName.friendName).remove();\n    setRender(!render);\n  }\n\n  function renderBubble(props) {\n    return _jsx(Bubble, _objectSpread(_objectSpread({}, props), {}, {\n      wrapperStyle: {\n        right: {\n          backgroundColor: '#daa520'\n        }\n      },\n      textStyle: {\n        right: {\n          color: 'black'\n        }\n      }\n    }));\n  }\n\n  function renderLoading() {\n    return _jsx(View, {\n      style: styles.loadingContainer,\n      children: _jsx(ActivityIndicator, {\n        size: \"large\",\n        color: \"#daa520\"\n      })\n    });\n  }\n\n  function renderSend(props) {\n    return _jsx(Send, _objectSpread(_objectSpread({}, props), {}, {\n      children: _jsx(View, {\n        style: styles.sendingContainer,\n        children: _jsx(IconButton, {\n          icon: \"send\",\n          size: 32,\n          color: \"#daa520\"\n        })\n      })\n    }));\n  }\n\n  function scrollToBottomComponent() {\n    return _jsx(View, {\n      style: styles.bottomComponentContainer,\n      children: _jsx(IconButton, {\n        icon: \"send\",\n        size: 36,\n        color: \"#6646ee\"\n      })\n    });\n  }\n\n  function renderSystemMessage(props) {\n    return _jsx(SystemMessage, _objectSpread(_objectSpread({}, props), {}, {\n      wrapperStyle: styles.systemMessageWrapper,\n      textStyle: styles.systemMessageText\n    }));\n  }\n\n  return _jsx(GiftedChat, {\n    messages: messages,\n    onSend: handleSend,\n    user: {\n      _id: auth.currentUser.uid\n    },\n    placeholder: \"Type your message here...\",\n    alwaysShowSend: true,\n    showUserAvatar: true,\n    scrollToBottom: true,\n    renderBubble: renderBubble,\n    renderLoading: renderLoading,\n    renderSend: renderSend,\n    scrollToBottomComponent: scrollToBottomComponent,\n    renderSystemMessage: renderSystemMessage\n  });\n}\nvar styles = StyleSheet.create({\n  loadingContainer: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  sendingContainer: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  bottomComponentContainer: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  systemMessageWrapper: {\n    backgroundColor: '#daa520',\n    borderRadius: 4,\n    padding: 5\n  },\n  systemMessageText: {\n    fontSize: 14,\n    color: 'black',\n    fontWeight: 'bold'\n  }\n});","map":{"version":3,"sources":["C:/projectpog/2022-ca326-travel-guide/MapDisplay/screens/ChatScreen.js"],"names":["React","useState","useEffect","useLayoutEffect","auth","chatDatabase","realtimeDatabase","GiftedChat","Bubble","Send","SystemMessage","IconButton","useNavigation","Icon","ChatScreen","route","messages","setMessages","chatName","params","navigation","node","ref","locationCheck","child","currentUser","displayName","once","snapshot","hasChild","friendName","render","setRender","handleSend","text","collection","doc","serverName","add","createdAt","Date","getTime","user","_id","uid","email","setOptions","headerRight","marginRight","removeFriendLocation","getFriendLocation","messagesListener","orderBy","onSnapshot","querySnapshot","docs","map","firebaseData","data","id","system","name","set","isLocationShared","remove","renderBubble","props","right","backgroundColor","color","renderLoading","styles","loadingContainer","renderSend","sendingContainer","scrollToBottomComponent","bottomComponentContainer","renderSystemMessage","systemMessageWrapper","systemMessageText","StyleSheet","create","flex","alignItems","justifyContent","borderRadius","padding","fontSize","fontWeight"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useLayoutEffect} from 'react'\r\nimport {View, StyleSheet, ActivityIndicator, TouchableOpacity} from 'react-native'\r\nimport {auth, chatDatabase, realtimeDatabase} from \"../firebase\";\r\nimport {GiftedChat, Bubble, Send, SystemMessage} from 'react-native-gifted-chat'\r\nimport {IconButton} from 'react-native-paper';\r\nimport {useNavigation} from \"@react-navigation/native\";\r\nimport {Icon} from \"react-native-elements\";\r\n\r\n\r\n//Functional component whihc handles all chatroom related procedures\r\nexport function ChatScreen ({route}) {\r\n    //Declaring necessary states\r\n    const [messages, setMessages] = useState([]);\r\n    const {chatName} = route.params\r\n    const navigation = useNavigation();\r\n    const node = realtimeDatabase.ref(\"users\");\r\n    let locationCheck = false\r\n    node.child(auth.currentUser.displayName).child(\"sharedLocations\").once('value', function(snapshot) {\r\n        //Checks if user is currently tracking other users location\r\n        if (snapshot.hasChild(chatName.friendName)) {\r\n            locationCheck = true\r\n        }\r\n    })\r\n    const [render, setRender] = useState(locationCheck)\r\n\r\n    //Asynchronous function\r\n    async function handleSend(messages) {\r\n        const text = messages[0].text;\r\n\r\n        //Pushes new text message with other necessary data to the firestore database\r\n        chatDatabase\r\n            .collection('Chatroom')\r\n            .doc(chatName.serverName)\r\n            .collection('chats')\r\n            .add({\r\n                text,\r\n                createdAt: new Date().getTime(),\r\n                user: {\r\n                    _id: auth.currentUser.uid,\r\n                    email: auth.currentUser.email\r\n                }\r\n            });\r\n    }\r\n\r\n    //Layout effect to set correct pararmeters for the location button\r\n    useLayoutEffect(() => {\r\n        render === true ?\r\n        navigation.setOptions({\r\n            headerRight: () => (\r\n                <TouchableOpacity style={{marginRight: 30}} onPress={() => removeFriendLocation()}>\r\n                    <Icon name=\"location-pin\" color={\"#daa520\"}/>\r\n                </TouchableOpacity>\r\n            ),\r\n        })\r\n        :\r\n        navigation.setOptions({\r\n            headerRight: () => (\r\n                <TouchableOpacity style={{marginRight: 30}} onPress={() => getFriendLocation()}>\r\n                    <Icon name=\"location-pin\" color={\"black\"}/>\r\n                </TouchableOpacity>\r\n            ),\r\n        })\r\n\r\n    }, [render])\r\n\r\n    //A useEffect which listens for updates within the firestore (listens if a new message has been sent)\r\n    useEffect(() => {\r\n\r\n        //Creates listener for the current chat room server\r\n        const messagesListener = chatDatabase\r\n            .collection('Chatroom')\r\n            .doc(chatName.serverName)\r\n            .collection('chats')\r\n            .orderBy('createdAt', 'desc')\r\n            .onSnapshot(querySnapshot => {\r\n                //A query which recieves all messages from the firestore database\r\n                const messages = querySnapshot.docs.map(doc => {\r\n                    const firebaseData = doc.data();\r\n\r\n                    //Sets necessary data for the message\r\n                    const data = {\r\n                        _id: doc.id,\r\n                        text: '',\r\n                        createdAt: new Date().getTime(),\r\n                        ...firebaseData\r\n                    };\r\n\r\n                    //If message is being sent by an actual user and not the firestore system\r\n                    if (!firebaseData.system) {\r\n                        data.user = {\r\n                            ...firebaseData.user,\r\n                            name: firebaseData.user.email\r\n                        };\r\n                    }\r\n\r\n                    return data;\r\n                });\r\n                setMessages(messages);\r\n            });\r\n\r\n        // Stop listening for updates whenever the component unmounts\r\n        return () => messagesListener();\r\n    }, []);\r\n\r\n    //Function which retrieves the friends Location \r\n    function getFriendLocation() {\r\n        node.child(auth.currentUser.displayName).child(\"sharedLocations\").child(chatName.friendName).set({isLocationShared: true})\r\n        setRender(!render)\r\n    }\r\n\r\n    //Function which removes the friends Location\r\n    function removeFriendLocation() {\r\n        node.child(auth.currentUser.displayName).child(\"sharedLocations\").child(chatName.friendName).remove();\r\n        setRender(!render)\r\n    }\r\n\r\n    //A function which creates the bubble around each text message\r\n    function renderBubble(props) {\r\n        return (\r\n            <Bubble\r\n                {...props}\r\n                wrapperStyle={{\r\n                    right: {\r\n                        backgroundColor: '#daa520'\r\n                    }\r\n                }}\r\n                textStyle={{\r\n                    right: {\r\n                        color: 'black'\r\n                    }\r\n                }}\r\n            />\r\n        );\r\n    }\r\n\r\n    //Renders loading animation\r\n    function renderLoading() {\r\n        return (\r\n            <View style={styles.loadingContainer}>\r\n                <ActivityIndicator size='large' color='#daa520' />\r\n            </View>\r\n        );\r\n    }\r\n\r\n    //Function which will render the send of the inputted text\r\n    function renderSend(props) {\r\n        return (\r\n            <Send {...props}>\r\n                <View style={styles.sendingContainer}>\r\n                    <IconButton icon='send' size={32} color='#daa520' />\r\n                </View>\r\n            </Send>\r\n        );\r\n    }\r\n\r\n    function scrollToBottomComponent() {\r\n        return (\r\n            <View style={styles.bottomComponentContainer}>\r\n                <IconButton icon='send' size={36} color='#6646ee' />\r\n            </View>\r\n        );\r\n    }\r\n\r\n    //Function which renders messages from the firestore system\r\n    function renderSystemMessage(props) {\r\n        return (\r\n            <SystemMessage\r\n                {...props}\r\n                wrapperStyle={styles.systemMessageWrapper}\r\n                textStyle={styles.systemMessageText}\r\n            />\r\n        );\r\n    }\r\n\r\n\r\n    return (\r\n        <GiftedChat\r\n            messages={messages}\r\n            onSend={handleSend}\r\n            user={{ _id: auth.currentUser.uid }}\r\n            placeholder='Type your message here...'\r\n            alwaysShowSend\r\n            showUserAvatar\r\n            scrollToBottom\r\n            renderBubble={renderBubble}\r\n            renderLoading={renderLoading}\r\n            renderSend={renderSend}\r\n            scrollToBottomComponent={scrollToBottomComponent}\r\n            renderSystemMessage={renderSystemMessage}\r\n\r\n        />\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    loadingContainer: {\r\n        flex: 1,\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    },\r\n    sendingContainer: {\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    bottomComponentContainer: {\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    systemMessageWrapper: {\r\n        backgroundColor: '#daa520',\r\n        borderRadius: 4,\r\n        padding: 5\r\n    },\r\n    systemMessageText: {\r\n        fontSize: 14,\r\n        color: 'black',\r\n        fontWeight: 'bold'\r\n    }\r\n});"]},"metadata":{},"sourceType":"module"}