{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"disabled\", \"onPress\", \"theme\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport color from 'color';\nimport { RadioButtonContext } from \"./RadioButtonGroup\";\nimport Icon from \"./Icon\";\nimport TouchableRipple from \"./TouchableRipple\";\nimport { withTheme } from \"../core/theming\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar RadioButtonIOS = function (_React$Component) {\n  _inherits(RadioButtonIOS, _React$Component);\n\n  var _super = _createSuper(RadioButtonIOS);\n\n  function RadioButtonIOS() {\n    _classCallCheck(this, RadioButtonIOS);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(RadioButtonIOS, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return _jsx(RadioButtonContext.Consumer, {\n        children: function children(context) {\n          var _this$props = _this.props,\n              disabled = _this$props.disabled,\n              onPress = _this$props.onPress,\n              theme = _this$props.theme,\n              rest = _objectWithoutProperties(_this$props, _excluded);\n\n          var checkedColor = disabled ? theme.colors.disabled : _this.props.color || theme.colors.accent;\n          var rippleColor;\n          var checked = context ? context.value === _this.props.value : _this.props.status === 'checked';\n\n          if (disabled) {\n            rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n          } else {\n            rippleColor = color(checkedColor).fade(0.32).rgb().string();\n          }\n\n          return _jsx(TouchableRipple, _objectSpread(_objectSpread({}, rest), {}, {\n            borderless: true,\n            rippleColor: rippleColor,\n            onPress: disabled ? undefined : function () {\n              context && context.onValueChange(_this.props.value);\n              onPress && onPress();\n            },\n            accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n            accessibilityComponentType: checked ? 'radiobutton_checked' : 'radiobutton_unchecked',\n            accessibilityRole: \"button\",\n            accessibilityStates: disabled ? ['disabled'] : undefined,\n            accessibilityLiveRegion: \"polite\",\n            style: styles.container,\n            children: _jsx(View, {\n              style: {\n                opacity: checked ? 1 : 0\n              },\n              children: _jsx(Icon, {\n                allowFontScaling: false,\n                source: \"done\",\n                size: 24,\n                color: checkedColor\n              })\n            })\n          }));\n        }\n      });\n    }\n  }]);\n\n  return RadioButtonIOS;\n}(React.Component);\n\nRadioButtonIOS.displayName = 'RadioButton.IOS';\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6\n  }\n});\nexport default withTheme(RadioButtonIOS);","map":{"version":3,"sources":["C:/projectpog/2022-ca326-travel-guide/MapDisplay/node_modules/react-native-paper/src/components/RadioButtonIOS.js"],"names":["React","color","RadioButtonContext","Icon","TouchableRipple","withTheme","RadioButtonIOS","context","props","disabled","onPress","theme","rest","checkedColor","colors","accent","rippleColor","checked","value","status","text","alpha","rgb","string","fade","undefined","onValueChange","styles","container","opacity","Component","displayName","StyleSheet","create","borderRadius","padding"],"mappings":";;;;;;;;;;;;;;;;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,kBAAT;AACA,OAAOC,IAAP;AACA,OAAOC,eAAP;AACA,SAASC,SAAT;;;IA6CMC,c;;;;;;;;;;;;;WAGJ,kBAAS;AAAA;;AACP,aACE,KAAC,kBAAD,CAAoB,QAApB;AAAA,kBACG,kBAAAC,OAAO,EAAI;AACV,4BAA8C,KAAI,CAACC,KAAnD;AAAA,cAAQC,QAAR,eAAQA,QAAR;AAAA,cAAkBC,OAAlB,eAAkBA,OAAlB;AAAA,cAA2BC,KAA3B,eAA2BA,KAA3B;AAAA,cAAqCC,IAArC;;AAEA,cAAMC,YAAY,GAAGJ,QAAQ,GACzBE,KAAK,CAACG,MAAN,CAAaL,QADY,GAEzB,KAAI,CAACD,KAAL,CAAWP,KAAX,IAAoBU,KAAK,CAACG,MAAN,CAAaC,MAFrC;AAIA,cAAIC,WAAJ;AAEA,cAAMC,OAAO,GAAGV,OAAO,GACnBA,OAAO,CAACW,KAAR,KAAkB,KAAI,CAACV,KAAL,CAAWU,KADV,GAEnB,KAAI,CAACV,KAAL,CAAWW,MAAX,KAAsB,SAF1B;;AAIA,cAAIV,QAAJ,EAAc;AACZO,YAAAA,WAAW,GAAGf,KAAK,CAACU,KAAK,CAACG,MAAN,CAAaM,IAAd,CAAL,CACXC,KADW,CACL,IADK,EAEXC,GAFW,GAGXC,MAHW,EAAd;AAID,WALD,MAKO;AACLP,YAAAA,WAAW,GAAGf,KAAK,CAACY,YAAD,CAAL,CACXW,IADW,CACN,IADM,EAEXF,GAFW,GAGXC,MAHW,EAAd;AAID;;AACD,iBACE,KAAC,eAAD,kCACMX,IADN;AAEE,YAAA,UAAU,MAFZ;AAGE,YAAA,WAAW,EAAEI,WAHf;AAIE,YAAA,OAAO,EACLP,QAAQ,GACJgB,SADI,GAEJ,YAAM;AACJlB,cAAAA,OAAO,IAAIA,OAAO,CAACmB,aAAR,CAAsB,KAAI,CAAClB,KAAL,CAAWU,KAAjC,CAAX;AACAR,cAAAA,OAAO,IAAIA,OAAO,EAAlB;AACD,aAVT;AAYE,YAAA,mBAAmB,EAAED,QAAQ,GAAG,CAAC,QAAD,EAAW,UAAX,CAAH,GAA4B,QAZ3D;AAaE,YAAA,0BAA0B,EACxBQ,OAAO,GAAG,qBAAH,GAA2B,uBAdtC;AAgBE,YAAA,iBAAiB,EAAC,QAhBpB;AAiBE,YAAA,mBAAmB,EAAER,QAAQ,GAAG,CAAC,UAAD,CAAH,GAAkBgB,SAjBjD;AAkBE,YAAA,uBAAuB,EAAC,QAlB1B;AAmBE,YAAA,KAAK,EAAEE,MAAM,CAACC,SAnBhB;AAAA,sBAqBE,KAAC,IAAD;AAAM,cAAA,KAAK,EAAE;AAAEC,gBAAAA,OAAO,EAAEZ,OAAO,GAAG,CAAH,GAAO;AAAzB,eAAb;AAAA,wBACE,KAAC,IAAD;AACE,gBAAA,gBAAgB,EAAE,KADpB;AAEE,gBAAA,MAAM,EAAC,MAFT;AAGE,gBAAA,IAAI,EAAE,EAHR;AAIE,gBAAA,KAAK,EAAEJ;AAJT;AADF;AArBF,aADF;AAgCD;AAzDH,QADF;AA6DD;;;;EAjE0Bb,KAAK,CAAC8B,S;;AAA7BxB,c,CACGyB,W,GAAc,iB;AAmEvB,IAAMJ,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;AAC/BL,EAAAA,SAAS,EAAE;AACTM,IAAAA,YAAY,EAAE,EADL;AAETC,IAAAA,OAAO,EAAE;AAFA;AADoB,CAAlB,CAAf;AAOA,eAAe9B,SAAS,CAACC,cAAD,CAAxB","sourcesContent":["/* @flow */\r\n\r\nimport * as React from 'react';\r\nimport { StyleSheet, View } from 'react-native';\r\nimport color from 'color';\r\nimport { RadioButtonContext } from './RadioButtonGroup';\r\nimport Icon from './Icon';\r\nimport TouchableRipple from './TouchableRipple';\r\nimport { withTheme } from '../core/theming';\r\nimport type { Theme } from '../types';\r\n\r\ntype Props = {\r\n  /**\r\n   * Value of the radio button\r\n   */\r\n  value: string,\r\n  /**\r\n   * Status of radio button.\r\n   */\r\n  status?: 'checked' | 'unchecked',\r\n  /**\r\n   * Whether radio is disabled.\r\n   */\r\n  disabled?: boolean,\r\n  /**\r\n   * Function to execute on press.\r\n   */\r\n  onPress?: () => mixed,\r\n  /**\r\n   * Custom color for radio.\r\n   */\r\n  color?: string,\r\n  /**\r\n   * @optional\r\n   */\r\n  theme: Theme,\r\n};\r\n\r\n/**\r\n * Radio buttons allow the selection a single option from a set.\r\n * This component follows platform guidelines for iOS.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <figure>\r\n *     <img src=\"screenshots/radio-enabled.ios.png\" />\r\n *     <figcaption>Enabled</figcaption>\r\n *   </figure>\r\n *   <figure>\r\n *     <img src=\"screenshots/radio-disabled.ios.png\" />\r\n *     <figcaption>Disabled</figcaption>\r\n *   </figure>\r\n * </div>\r\n */\r\nclass RadioButtonIOS extends React.Component<Props> {\r\n  static displayName = 'RadioButton.IOS';\r\n\r\n  render() {\r\n    return (\r\n      <RadioButtonContext.Consumer>\r\n        {context => {\r\n          const { disabled, onPress, theme, ...rest } = this.props;\r\n\r\n          const checkedColor = disabled\r\n            ? theme.colors.disabled\r\n            : this.props.color || theme.colors.accent;\r\n\r\n          let rippleColor;\r\n\r\n          const checked = context\r\n            ? context.value === this.props.value\r\n            : this.props.status === 'checked';\r\n\r\n          if (disabled) {\r\n            rippleColor = color(theme.colors.text)\r\n              .alpha(0.16)\r\n              .rgb()\r\n              .string();\r\n          } else {\r\n            rippleColor = color(checkedColor)\r\n              .fade(0.32)\r\n              .rgb()\r\n              .string();\r\n          }\r\n          return (\r\n            <TouchableRipple\r\n              {...rest}\r\n              borderless\r\n              rippleColor={rippleColor}\r\n              onPress={\r\n                disabled\r\n                  ? undefined\r\n                  : () => {\r\n                      context && context.onValueChange(this.props.value);\r\n                      onPress && onPress();\r\n                    }\r\n              }\r\n              accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\r\n              accessibilityComponentType={\r\n                checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\r\n              }\r\n              accessibilityRole=\"button\"\r\n              accessibilityStates={disabled ? ['disabled'] : undefined}\r\n              accessibilityLiveRegion=\"polite\"\r\n              style={styles.container}\r\n            >\r\n              <View style={{ opacity: checked ? 1 : 0 }}>\r\n                <Icon\r\n                  allowFontScaling={false}\r\n                  source=\"done\"\r\n                  size={24}\r\n                  color={checkedColor}\r\n                />\r\n              </View>\r\n            </TouchableRipple>\r\n          );\r\n        }}\r\n      </RadioButtonContext.Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    borderRadius: 18,\r\n    padding: 6,\r\n  },\r\n});\r\n\r\nexport default withTheme(RadioButtonIOS);\r\n"]},"metadata":{},"sourceType":"module"}