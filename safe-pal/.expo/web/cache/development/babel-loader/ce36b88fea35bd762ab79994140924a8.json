{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport { polyfill } from 'react-lifecycles-compat';\nimport { withTheme } from \"../core/theming\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Modal = function (_React$Component) {\n  _inherits(Modal, _React$Component);\n\n  var _super = _createSuper(Modal);\n\n  function Modal() {\n    var _this;\n\n    _classCallCheck(this, Modal);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      opacity: new Animated.Value(_this.props.visible ? 1 : 0),\n      rendered: _this.props.visible\n    };\n\n    _this._handleBack = function () {\n      if (_this.props.dismissable) {\n        _this._hideModal();\n      }\n\n      return true;\n    };\n\n    _this._showModal = function () {\n      BackHandler.addEventListener('hardwareBackPress', _this._handleBack);\n      Animated.timing(_this.state.opacity, {\n        toValue: 1,\n        duration: 280,\n        easing: Easing.ease\n      }).start();\n    };\n\n    _this._hideModal = function () {\n      BackHandler.removeEventListener('hardwareBackPress', _this._handleBack);\n      Animated.timing(_this.state.opacity, {\n        toValue: 0,\n        duration: 280,\n        easing: Easing.ease\n      }).start(function () {\n        if (_this.props.visible && _this.props.onDismiss) {\n          _this.props.onDismiss();\n        }\n\n        if (_this.props.visible) {\n          _this._showModal();\n        } else {\n          _this.setState({\n            rendered: false\n          });\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Modal, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.visible !== this.props.visible) {\n        if (this.props.visible) {\n          this._showModal();\n        } else {\n          this._hideModal();\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.state.rendered) return null;\n      var _this$props = this.props,\n          children = _this$props.children,\n          dismissable = _this$props.dismissable,\n          theme = _this$props.theme;\n      var colors = theme.colors;\n      return _jsxs(Animated.View, {\n        accessibilityViewIsModal: true,\n        accessibilityLiveRegion: \"polite\",\n        style: [{\n          opacity: this.state.opacity\n        }, StyleSheet.absoluteFill],\n        children: [_jsx(TouchableWithoutFeedback, {\n          onPress: dismissable ? this._hideModal : undefined,\n          children: _jsx(View, {\n            style: [styles.backdrop, {\n              backgroundColor: colors.backdrop\n            }]\n          })\n        }), _jsx(View, {\n          pointerEvents: \"box-none\",\n          style: styles.content,\n          children: children\n        })]\n      });\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (nextProps.visible && !prevState.rendered) {\n        return {\n          rendered: true\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return Modal;\n}(React.Component);\n\nModal.defaultProps = {\n  dismissable: true,\n  visible: false\n};\npolyfill(Modal);\nexport default withTheme(Modal);\nvar styles = StyleSheet.create({\n  backdrop: {\n    flex: 1\n  },\n  content: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    justifyContent: 'center'\n  })\n});","map":{"version":3,"sources":["C:/projectpog/2022-ca326-travel-guide/MapDisplay/node_modules/react-native-paper/src/components/Modal.js"],"names":["React","polyfill","withTheme","Modal","state","opacity","Animated","Value","props","visible","rendered","_handleBack","dismissable","_hideModal","_showModal","BackHandler","addEventListener","timing","toValue","duration","easing","Easing","ease","start","removeEventListener","onDismiss","setState","prevProps","children","theme","colors","StyleSheet","absoluteFill","undefined","styles","backdrop","backgroundColor","content","nextProps","prevState","Component","defaultProps","create","flex","absoluteFillObject","justifyContent"],"mappings":"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","sourcesContent":["/* @flow */\r\n\r\nimport * as React from 'react';\r\nimport {\r\n  Animated,\r\n  View,\r\n  Easing,\r\n  StyleSheet,\r\n  TouchableWithoutFeedback,\r\n  BackHandler,\r\n} from 'react-native';\r\nimport { polyfill } from 'react-lifecycles-compat';\r\nimport { withTheme } from '../core/theming';\r\nimport type { Theme } from '../types';\r\n\r\ntype Props = {\r\n  /**\r\n   * Determines whether clicking outside the modal dismiss it.\r\n   */\r\n  dismissable?: boolean,\r\n  /**\r\n   * Callback that is called when the user dismisses the modal.\r\n   */\r\n  onDismiss: () => mixed,\r\n  /**\r\n   * Determines Whether the modal is visible.\r\n   */\r\n  visible: boolean,\r\n  /**\r\n   * Content of the `Modal`.\r\n   */\r\n  children: React.Node,\r\n  /**\r\n   * @optional\r\n   */\r\n  theme: Theme,\r\n};\r\n\r\ntype State = {\r\n  opacity: Animated.Value,\r\n  rendered: boolean,\r\n};\r\n\r\n/**\r\n * The Modal component is a simple way to present content above an enclosing view.\r\n * To render the `Modal` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { Modal, Portal, Text } from 'react-native-paper';\r\n *\r\n * export default class MyComponent extends React.Component {\r\n *   state = {\r\n *     visible: false,\r\n *   };\r\n *\r\n *   _showModal = () => this.setState({ visible: true });\r\n *   _hideModal = () => this.setState({ visible: false });\r\n *\r\n *   render() {\r\n *     const { visible } = this.state;\r\n *     return (\r\n *       <Portal>\r\n *         <Modal visible={visible} onDismiss={this._hideModal}>\r\n *           <Text>Example Modal</Text>\r\n *         </Modal>\r\n *       </Portal>\r\n *     );\r\n *   }\r\n * }\r\n * ```\r\n */\r\n\r\nclass Modal extends React.Component<Props, State> {\r\n  static defaultProps = {\r\n    dismissable: true,\r\n    visible: false,\r\n  };\r\n\r\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\r\n    if (nextProps.visible && !prevState.rendered) {\r\n      return {\r\n        rendered: true,\r\n      };\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  state = {\r\n    opacity: new Animated.Value(this.props.visible ? 1 : 0),\r\n    rendered: this.props.visible,\r\n  };\r\n\r\n  componentDidUpdate(prevProps: Props) {\r\n    if (prevProps.visible !== this.props.visible) {\r\n      if (this.props.visible) {\r\n        this._showModal();\r\n      } else {\r\n        this._hideModal();\r\n      }\r\n    }\r\n  }\r\n\r\n  _handleBack = () => {\r\n    if (this.props.dismissable) {\r\n      this._hideModal();\r\n    }\r\n    return true;\r\n  };\r\n\r\n  _showModal = () => {\r\n    BackHandler.addEventListener('hardwareBackPress', this._handleBack);\r\n    Animated.timing(this.state.opacity, {\r\n      toValue: 1,\r\n      duration: 280,\r\n      easing: Easing.ease,\r\n    }).start();\r\n  };\r\n\r\n  _hideModal = () => {\r\n    BackHandler.removeEventListener('hardwareBackPress', this._handleBack);\r\n    Animated.timing(this.state.opacity, {\r\n      toValue: 0,\r\n      duration: 280,\r\n      easing: Easing.ease,\r\n    }).start(() => {\r\n      if (this.props.visible && this.props.onDismiss) {\r\n        this.props.onDismiss();\r\n      }\r\n      if (this.props.visible) {\r\n        this._showModal();\r\n      } else {\r\n        this.setState({\r\n          rendered: false,\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    if (!this.state.rendered) return null;\r\n\r\n    const { children, dismissable, theme } = this.props;\r\n    const { colors } = theme;\r\n    return (\r\n      <Animated.View\r\n        accessibilityViewIsModal\r\n        accessibilityLiveRegion=\"polite\"\r\n        style={[{ opacity: this.state.opacity }, StyleSheet.absoluteFill]}\r\n      >\r\n        <TouchableWithoutFeedback\r\n          onPress={dismissable ? this._hideModal : undefined}\r\n        >\r\n          <View\r\n            style={[styles.backdrop, { backgroundColor: colors.backdrop }]}\r\n          />\r\n        </TouchableWithoutFeedback>\r\n        <View pointerEvents=\"box-none\" style={styles.content}>\r\n          {children}\r\n        </View>\r\n      </Animated.View>\r\n    );\r\n  }\r\n}\r\n\r\npolyfill(Modal);\r\n\r\nexport default withTheme(Modal);\r\n\r\nconst styles = StyleSheet.create({\r\n  backdrop: {\r\n    flex: 1,\r\n  },\r\n  content: {\r\n    ...StyleSheet.absoluteFillObject,\r\n    justifyContent: 'center',\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}