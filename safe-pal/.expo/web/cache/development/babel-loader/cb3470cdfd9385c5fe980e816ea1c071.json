{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport color from 'color';\nimport Icon from \"./Icon\";\nimport Surface from \"./Surface\";\nimport Text from \"./Typography/Text\";\nimport TouchableRipple from \"./TouchableRipple\";\nimport { withTheme } from \"../core/theming\";\nimport { black, white } from \"../styles/colors\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Chip = function (_React$Component) {\n  _inherits(Chip, _React$Component);\n\n  var _super = _createSuper(Chip);\n\n  function Chip() {\n    var _this;\n\n    _classCallCheck(this, Chip);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      elevation: new Animated.Value(0)\n    };\n\n    _this._handlePressIn = function () {\n      Animated.timing(_this.state.elevation, {\n        toValue: 4,\n        duration: 200\n      }).start();\n    };\n\n    _this._handlePressOut = function () {\n      Animated.timing(_this.state.elevation, {\n        toValue: 0,\n        duration: 150\n      }).start();\n    };\n\n    return _this;\n  }\n\n  _createClass(Chip, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          mode = _this$props.mode,\n          children = _this$props.children,\n          icon = _this$props.icon,\n          avatar = _this$props.avatar,\n          selected = _this$props.selected,\n          disabled = _this$props.disabled,\n          accessibilityLabel = _this$props.accessibilityLabel,\n          onPress = _this$props.onPress,\n          onClose = _this$props.onClose,\n          style = _this$props.style,\n          theme = _this$props.theme;\n      var dark = theme.dark,\n          colors = theme.colors;\n\n      var _ref = StyleSheet.flatten(style) || {},\n          _ref$backgroundColor = _ref.backgroundColor,\n          backgroundColor = _ref$backgroundColor === void 0 ? mode === 'outlined' ? colors.surface : dark ? '#383838' : '#ebebeb' : _ref$backgroundColor;\n\n      var borderColor = mode === 'outlined' ? color(dark ? white : black).alpha(0.29).rgb().string() : backgroundColor;\n      var textColor = disabled ? colors.disabled : color(colors.text).alpha(0.87).rgb().string();\n      var iconColor = disabled ? colors.disabled : color(colors.text).alpha(0.54).rgb().string();\n      var selectedBackgroundColor = color(dark ? white : black).alpha(mode === 'outlined' ? 0.12 : 0.24).rgb().string();\n      var accessibilityTraits = ['button'];\n      var accessibilityStates = [];\n\n      if (selected) {\n        accessibilityTraits.push('selected');\n        accessibilityStates.push('selected');\n      }\n\n      if (disabled) {\n        accessibilityTraits.push('disabled');\n        accessibilityStates.push('disabled');\n      }\n\n      return _jsx(Surface, {\n        style: [styles.container, {\n          elevation: Platform.OS === 'android' ? this.state.elevation : 0,\n          backgroundColor: selected ? selectedBackgroundColor : backgroundColor,\n          borderColor: borderColor\n        }, style],\n        children: _jsx(TouchableRipple, {\n          borderless: true,\n          delayPressIn: 0,\n          style: styles.touchable,\n          onPress: onPress,\n          onPressIn: this._handlePressIn,\n          onPressOut: this._handlePressOut,\n          underlayColor: selectedBackgroundColor,\n          disabled: disabled,\n          accessibilityLabel: accessibilityLabel,\n          accessibilityTraits: accessibilityTraits,\n          accessibilityComponentType: \"button\",\n          accessibilityRole: \"button\",\n          accessibilityStates: accessibilityStates,\n          children: _jsxs(View, {\n            style: styles.content,\n            children: [avatar && !icon ? _jsx(View, {\n              style: [styles.avatarWrapper, disabled && {\n                opacity: 0.26\n              }],\n              children: React.isValidElement(avatar) ? React.cloneElement(avatar, {\n                style: [styles.avatar, avatar.props.style]\n              }) : avatar\n            }) : null, icon || selected ? _jsx(View, {\n              style: [styles.icon, avatar ? [styles.avatar, styles.avatarSelected] : null],\n              children: _jsx(Icon, {\n                source: icon || 'done',\n                color: avatar ? white : iconColor,\n                size: 18\n              })\n            }) : null, _jsx(Text, {\n              numberOfLines: 1,\n              style: [styles.text, {\n                color: textColor,\n                marginRight: onClose ? 4 : 8,\n                marginLeft: avatar || icon || selected ? 4 : 8\n              }],\n              children: children\n            }), onClose ? _jsx(TouchableWithoutFeedback, {\n              onPress: onClose,\n              accessibilityTraits: \"button\",\n              accessibilityComponentType: \"button\",\n              children: _jsx(View, {\n                style: styles.icon,\n                children: _jsx(Icon, {\n                  source: \"cancel\",\n                  size: 16,\n                  color: iconColor\n                })\n              })\n            }) : null]\n          })\n        })\n      });\n    }\n  }]);\n\n  return Chip;\n}(React.Component);\n\nChip.defaultProps = {\n  mode: 'flat',\n  disabled: false,\n  selected: false\n};\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 16,\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid'\n  },\n  touchable: {\n    borderRadius: 16\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4\n  },\n  icon: {\n    padding: 4\n  },\n  text: {\n    height: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12\n  },\n  avatarWrapper: {\n    marginRight: 4\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)'\n  }\n});\nexport default withTheme(Chip);","map":{"version":3,"sources":["C:/projectpog/2022-ca326-travel-guide/MapDisplay/node_modules/react-native-paper/src/components/Chip.js"],"names":["React","color","Icon","Surface","Text","TouchableRipple","withTheme","black","white","Chip","state","elevation","Animated","Value","_handlePressIn","timing","toValue","duration","start","_handlePressOut","props","mode","children","icon","avatar","selected","disabled","accessibilityLabel","onPress","onClose","style","theme","dark","colors","StyleSheet","flatten","backgroundColor","surface","borderColor","alpha","rgb","string","textColor","text","iconColor","selectedBackgroundColor","accessibilityTraits","accessibilityStates","push","styles","container","Platform","OS","touchable","content","avatarWrapper","opacity","isValidElement","cloneElement","avatarSelected","marginRight","marginLeft","Component","defaultProps","create","borderRadius","borderWidth","hairlineWidth","borderStyle","flexDirection","alignItems","paddingHorizontal","padding","height","lineHeight","textAlignVertical","marginVertical","width","position","top","left"],"mappings":"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","sourcesContent":["/* @flow */\r\n\r\nimport * as React from 'react';\r\nimport {\r\n  View,\r\n  StyleSheet,\r\n  Animated,\r\n  TouchableWithoutFeedback,\r\n  Platform,\r\n} from 'react-native';\r\nimport color from 'color';\r\nimport Icon from './Icon';\r\nimport Surface from './Surface';\r\nimport Text from './Typography/Text';\r\nimport TouchableRipple from './TouchableRipple';\r\nimport { withTheme } from '../core/theming';\r\nimport { black, white } from '../styles/colors';\r\nimport type { Theme } from '../types';\r\nimport type { IconSource } from './Icon';\r\n\r\ntype Props = {\r\n  /**\r\n   * Mode of the chip.\r\n   * - `flat` - flat chip without outline.\r\n   * - `outlined` - chip with an outline.\r\n   */\r\n  mode?: 'flat' | 'outlined',\r\n  /**\r\n   * Text content of the `Chip`.\r\n   */\r\n  children: React.Node,\r\n  /**\r\n   * Icon to display for the `Chip`. Both icon and avatar cannot be specified.\r\n   */\r\n  icon?: IconSource,\r\n  /**\r\n   * Avatar to display for the `Chip`. Both icon and avatar cannot be specified.\r\n   */\r\n  avatar?: React.Node,\r\n  /**\r\n   * Whether to style the chip as selected.\r\n   */\r\n  selected?: boolean,\r\n  /**\r\n   * Whether the chip is disabled. A disabled chip is greyed out and `onPress` is not called on touch.\r\n   */\r\n  disabled?: boolean,\r\n  /**\r\n   * Accessibility label for the chip. This is read by the screen reader when the user taps the chip.\r\n   */\r\n  accessibilityLabel?: string,\r\n  /**\r\n   * Function to execute on press.\r\n   */\r\n  onPress?: () => mixed,\r\n  /**\r\n   * Function to execute on close button press. The close button appears only when this prop is specified.\r\n   */\r\n  onClose?: () => mixed,\r\n  style?: any,\r\n  /**\r\n   * @optional\r\n   */\r\n  theme: Theme,\r\n};\r\n\r\ntype State = {\r\n  elevation: Animated.Value,\r\n};\r\n\r\n/**\r\n * Chips can be used to display entities in small blocks.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <figure>\r\n *     <img class=\"medium\" src=\"screenshots/chip-1.png\" />\r\n *     <figcaption>Flat chip</figcaption>\r\n *   </figure>\r\n *   <figure>\r\n *     <img class=\"medium\" src=\"screenshots/chip-2.png\" />\r\n *     <figcaption>Outlined chip</figcaption>\r\n *   </figure>\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { Chip } from 'react-native-paper';\r\n *\r\n * const MyComponent = () => (\r\n *   <Chip icon=\"info\" onPress={() => console.log('Pressed')}>Example Chip</Chip>\r\n * );\r\n *\r\n * export default MyComponent;\r\n * ```\r\n */\r\nclass Chip extends React.Component<Props, State> {\r\n  static defaultProps = {\r\n    mode: 'flat',\r\n    disabled: false,\r\n    selected: false,\r\n  };\r\n\r\n  state = {\r\n    elevation: new Animated.Value(0),\r\n  };\r\n\r\n  _handlePressIn = () => {\r\n    Animated.timing(this.state.elevation, {\r\n      toValue: 4,\r\n      duration: 200,\r\n    }).start();\r\n  };\r\n\r\n  _handlePressOut = () => {\r\n    Animated.timing(this.state.elevation, {\r\n      toValue: 0,\r\n      duration: 150,\r\n    }).start();\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      mode,\r\n      children,\r\n      icon,\r\n      avatar,\r\n      selected,\r\n      disabled,\r\n      accessibilityLabel,\r\n      onPress,\r\n      onClose,\r\n      style,\r\n      theme,\r\n    } = this.props;\r\n    const { dark, colors } = theme;\r\n\r\n    const {\r\n      backgroundColor = mode === 'outlined'\r\n        ? colors.surface\r\n        : dark\r\n          ? '#383838'\r\n          : '#ebebeb',\r\n    } =\r\n      StyleSheet.flatten(style) || {};\r\n\r\n    const borderColor =\r\n      mode === 'outlined'\r\n        ? color(dark ? white : black)\r\n            .alpha(0.29)\r\n            .rgb()\r\n            .string()\r\n        : backgroundColor;\r\n    const textColor = disabled\r\n      ? colors.disabled\r\n      : color(colors.text)\r\n          .alpha(0.87)\r\n          .rgb()\r\n          .string();\r\n    const iconColor = disabled\r\n      ? colors.disabled\r\n      : color(colors.text)\r\n          .alpha(0.54)\r\n          .rgb()\r\n          .string();\r\n    const selectedBackgroundColor = color(dark ? white : black)\r\n      .alpha(mode === 'outlined' ? 0.12 : 0.24)\r\n      .rgb()\r\n      .string();\r\n\r\n    const accessibilityTraits = ['button'];\r\n    const accessibilityStates = [];\r\n\r\n    if (selected) {\r\n      accessibilityTraits.push('selected');\r\n      accessibilityStates.push('selected');\r\n    }\r\n\r\n    if (disabled) {\r\n      accessibilityTraits.push('disabled');\r\n      accessibilityStates.push('disabled');\r\n    }\r\n\r\n    return (\r\n      <Surface\r\n        style={[\r\n          styles.container,\r\n          {\r\n            elevation: Platform.OS === 'android' ? this.state.elevation : 0,\r\n            backgroundColor: selected\r\n              ? selectedBackgroundColor\r\n              : backgroundColor,\r\n            borderColor,\r\n          },\r\n          style,\r\n        ]}\r\n      >\r\n        <TouchableRipple\r\n          borderless\r\n          delayPressIn={0}\r\n          style={styles.touchable}\r\n          onPress={onPress}\r\n          onPressIn={this._handlePressIn}\r\n          onPressOut={this._handlePressOut}\r\n          underlayColor={selectedBackgroundColor}\r\n          disabled={disabled}\r\n          accessibilityLabel={accessibilityLabel}\r\n          accessibilityTraits={accessibilityTraits}\r\n          accessibilityComponentType=\"button\"\r\n          accessibilityRole=\"button\"\r\n          accessibilityStates={accessibilityStates}\r\n        >\r\n          <View style={styles.content}>\r\n            {avatar && !icon ? (\r\n              <View\r\n                style={[styles.avatarWrapper, disabled && { opacity: 0.26 }]}\r\n              >\r\n                {React.isValidElement(avatar)\r\n                  ? /* $FlowFixMe */\r\n                    React.cloneElement(avatar, {\r\n                      /* $FlowFixMe */\r\n                      style: [styles.avatar, avatar.props.style],\r\n                    })\r\n                  : avatar}\r\n              </View>\r\n            ) : null}\r\n            {icon || selected ? (\r\n              <View\r\n                style={[\r\n                  styles.icon,\r\n                  avatar ? [styles.avatar, styles.avatarSelected] : null,\r\n                ]}\r\n              >\r\n                <Icon\r\n                  source={icon || 'done'}\r\n                  color={avatar ? white : iconColor}\r\n                  size={18}\r\n                />\r\n              </View>\r\n            ) : null}\r\n            <Text\r\n              numberOfLines={1}\r\n              style={[\r\n                styles.text,\r\n                {\r\n                  color: textColor,\r\n                  marginRight: onClose ? 4 : 8,\r\n                  marginLeft: avatar || icon || selected ? 4 : 8,\r\n                },\r\n              ]}\r\n            >\r\n              {children}\r\n            </Text>\r\n            {onClose ? (\r\n              <TouchableWithoutFeedback\r\n                onPress={onClose}\r\n                accessibilityTraits=\"button\"\r\n                accessibilityComponentType=\"button\"\r\n              >\r\n                <View style={styles.icon}>\r\n                  <Icon source=\"cancel\" size={16} color={iconColor} />\r\n                </View>\r\n              </TouchableWithoutFeedback>\r\n            ) : null}\r\n          </View>\r\n        </TouchableRipple>\r\n      </Surface>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    borderRadius: 16,\r\n    borderWidth: StyleSheet.hairlineWidth,\r\n    borderStyle: 'solid',\r\n  },\r\n  touchable: {\r\n    borderRadius: 16,\r\n  },\r\n  content: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    paddingHorizontal: 4,\r\n  },\r\n  icon: {\r\n    padding: 4,\r\n  },\r\n  text: {\r\n    height: 24,\r\n    lineHeight: 24,\r\n    textAlignVertical: 'center',\r\n    marginVertical: 4,\r\n  },\r\n  avatar: {\r\n    width: 24,\r\n    height: 24,\r\n    borderRadius: 12,\r\n  },\r\n  avatarWrapper: {\r\n    marginRight: 4,\r\n  },\r\n  avatarSelected: {\r\n    position: 'absolute',\r\n    top: 4,\r\n    left: 4,\r\n    backgroundColor: 'rgba(0, 0, 0, .29)',\r\n  },\r\n});\r\n\r\nexport default withTheme(Chip);\r\n"]},"metadata":{},"sourceType":"module"}