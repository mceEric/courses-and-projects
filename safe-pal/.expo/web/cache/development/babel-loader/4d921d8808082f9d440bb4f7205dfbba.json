{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"disabled\", \"compact\", \"mode\", \"dark\", \"loading\", \"icon\", \"color\", \"children\", \"accessibilityLabel\", \"onPress\", \"style\", \"theme\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport Icon from \"./Icon\";\nimport Surface from \"./Surface\";\nimport Text from \"./Typography/Text\";\nimport TouchableRipple from \"./TouchableRipple\";\nimport { black, white } from \"../styles/colors\";\nimport { withTheme } from \"../core/theming\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Button = function (_React$Component) {\n  _inherits(Button, _React$Component);\n\n  var _super = _createSuper(Button);\n\n  function Button() {\n    var _this;\n\n    _classCallCheck(this, Button);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      elevation: new Animated.Value(_this.props.mode === 'contained' ? 2 : 0)\n    };\n\n    _this._handlePressIn = function () {\n      if (_this.props.mode === 'contained') {\n        Animated.timing(_this.state.elevation, {\n          toValue: 8,\n          duration: 200\n        }).start();\n      }\n    };\n\n    _this._handlePressOut = function () {\n      if (_this.props.mode === 'contained') {\n        Animated.timing(_this.state.elevation, {\n          toValue: 2,\n          duration: 150\n        }).start();\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Button, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          disabled = _this$props.disabled,\n          compact = _this$props.compact,\n          mode = _this$props.mode,\n          dark = _this$props.dark,\n          loading = _this$props.loading,\n          icon = _this$props.icon,\n          buttonColor = _this$props.color,\n          children = _this$props.children,\n          accessibilityLabel = _this$props.accessibilityLabel,\n          onPress = _this$props.onPress,\n          style = _this$props.style,\n          theme = _this$props.theme,\n          rest = _objectWithoutProperties(_this$props, _excluded);\n\n      var colors = theme.colors,\n          roundness = theme.roundness;\n      var fontFamily = theme.fonts.medium;\n      var backgroundColor, borderColor, textColor, borderWidth;\n\n      if (mode === 'contained') {\n        if (disabled) {\n          backgroundColor = color(theme.dark ? white : black).alpha(0.12).rgb().string();\n        } else if (buttonColor) {\n          backgroundColor = buttonColor;\n        } else {\n          backgroundColor = colors.primary;\n        }\n      } else {\n        backgroundColor = 'transparent';\n      }\n\n      if (mode === 'outlined') {\n        borderColor = color(theme.dark ? white : black).alpha(0.29).rgb().string();\n        borderWidth = StyleSheet.hairlineWidth;\n      } else {\n        borderColor = 'transparent';\n        borderWidth = 0;\n      }\n\n      if (disabled) {\n        textColor = color(theme.dark ? white : black).alpha(0.32).rgb().string();\n      } else if (mode === 'contained') {\n        var isDark;\n\n        if (typeof dark === 'boolean') {\n          isDark = dark;\n        } else {\n          isDark = backgroundColor === 'transparent' ? false : !color(backgroundColor).light();\n        }\n\n        textColor = isDark ? white : black;\n      } else if (buttonColor) {\n        textColor = buttonColor;\n      } else {\n        textColor = colors.primary;\n      }\n\n      var rippleColor = color(textColor).alpha(0.32).rgb().string();\n      var buttonStyle = {\n        backgroundColor: backgroundColor,\n        borderColor: borderColor,\n        borderWidth: borderWidth,\n        borderRadius: roundness\n      };\n      var touchableStyle = {\n        borderRadius: roundness\n      };\n      var textStyle = {\n        color: textColor,\n        fontFamily: fontFamily\n      };\n      var elevation = disabled ? 0 : this.state.elevation;\n      return _jsx(Surface, _objectSpread(_objectSpread({}, rest), {}, {\n        style: [styles.button, compact && styles.compact, {\n          elevation: elevation\n        }, buttonStyle, style],\n        children: _jsx(TouchableRipple, {\n          borderless: true,\n          delayPressIn: 0,\n          onPress: onPress,\n          onPressIn: this._handlePressIn,\n          onPressOut: this._handlePressOut,\n          accessibilityLabel: accessibilityLabel,\n          accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n          accessibilityComponentType: \"button\",\n          accessibilityRole: \"button\",\n          accessibilityStates: disabled ? ['disabled'] : undefined,\n          disabled: disabled,\n          rippleColor: rippleColor,\n          style: touchableStyle,\n          children: _jsxs(View, {\n            style: styles.content,\n            children: [icon && loading !== true ? _jsx(View, {\n              style: styles.icon,\n              children: _jsx(Icon, {\n                source: icon,\n                size: 16,\n                color: textColor\n              })\n            }) : null, loading ? _jsx(ActivityIndicator, {\n              size: \"small\",\n              color: textColor,\n              style: styles.icon\n            }) : null, _jsx(Text, {\n              numberOfLines: 1,\n              style: [styles.label, compact && styles.compactLabel, textStyle, {\n                fontFamily: fontFamily\n              }],\n              children: React.Children.map(children, function (child) {\n                return typeof child === 'string' ? child.toUpperCase() : child;\n              })\n            })]\n          })\n        })\n      }));\n    }\n  }]);\n\n  return Button;\n}(React.Component);\n\nButton.defaultProps = {\n  mode: 'text'\n};\nvar styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid'\n  },\n  compact: {\n    minWidth: 'auto'\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  icon: {\n    width: 16,\n    marginLeft: 12,\n    marginRight: -4\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16\n  },\n  compactLabel: {\n    marginHorizontal: 8\n  }\n});\nexport default withTheme(Button);","map":{"version":3,"sources":["C:/projectpog/2022-ca326-travel-guide/MapDisplay/node_modules/react-native-paper/src/components/Button.js"],"names":["React","color","Icon","Surface","Text","TouchableRipple","black","white","withTheme","Button","state","elevation","Animated","Value","props","mode","_handlePressIn","timing","toValue","duration","start","_handlePressOut","disabled","compact","dark","loading","icon","buttonColor","children","accessibilityLabel","onPress","style","theme","rest","colors","roundness","fontFamily","fonts","medium","backgroundColor","borderColor","textColor","borderWidth","alpha","rgb","string","primary","StyleSheet","hairlineWidth","isDark","light","rippleColor","buttonStyle","borderRadius","touchableStyle","textStyle","styles","button","undefined","content","label","compactLabel","Children","map","child","toUpperCase","Component","defaultProps","create","minWidth","borderStyle","flexDirection","alignItems","justifyContent","width","marginLeft","marginRight","textAlign","letterSpacing","marginVertical","marginHorizontal"],"mappings":"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","sourcesContent":["/* @flow */\r\n\r\nimport * as React from 'react';\r\nimport { ActivityIndicator, Animated, View, StyleSheet } from 'react-native';\r\nimport color from 'color';\r\nimport Icon from './Icon';\r\nimport Surface from './Surface';\r\nimport Text from './Typography/Text';\r\nimport TouchableRipple from './TouchableRipple';\r\nimport { black, white } from '../styles/colors';\r\nimport { withTheme } from '../core/theming';\r\nimport type { Theme } from '../types';\r\nimport type { IconSource } from './Icon';\r\n\r\ntype Props = {\r\n  /**\r\n   * Mode of the button. You can change the mode to adjust the styling to give it desired emphasis.\r\n   * - `text` - flat button without background or outline (low emphasis)\r\n   * - `outlined` - button with an outline (medium emphasis)\r\n   * - `contained` - button with a background color and elevation shadow (high emphasis)\r\n   */\r\n  mode?: 'text' | 'outlined' | 'contained',\r\n  /**\r\n   * Whether the color is a dark color. A dark button will render light text and vice-versa. Only applicable for `contained` mode.\r\n   */\r\n  dark?: boolean,\r\n  /**\r\n   * Use a compact look, useful for `text` buttons in a row.\r\n   */\r\n  compact?: boolean,\r\n  /**\r\n   * Custom text color for flat button, or background color for contained button.\r\n   */\r\n  color?: string,\r\n  /**\r\n   * Whether to show a loading indicator.\r\n   */\r\n  loading?: boolean,\r\n  /**\r\n   * Icon to display for the `Button`.\r\n   */\r\n  icon?: IconSource,\r\n  /**\r\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\r\n   */\r\n  disabled?: boolean,\r\n  /**\r\n   * Label text of the button.\r\n   */\r\n  children: React.Node,\r\n  /**\r\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\r\n   */\r\n  accessibilityLabel?: string,\r\n  /**\r\n   * Function to execute on press.\r\n   */\r\n  onPress?: () => mixed,\r\n  style?: any,\r\n  /**\r\n   * @optional\r\n   */\r\n  theme: Theme,\r\n};\r\n\r\ntype State = {\r\n  elevation: Animated.Value,\r\n};\r\n\r\n/**\r\n * A button is component that the user can press to trigger an action.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <figure>\r\n *     <img src=\"screenshots/button-1.png\" />\r\n *     <figcaption>Text button</figcaption>\r\n *   </figure>\r\n *   <figure>\r\n *     <img src=\"screenshots/button-2.png\" />\r\n *     <figcaption>Outlined button</figcaption>\r\n *   </figure>\r\n *   <figure>\r\n *     <img src=\"screenshots/button-3.png\" />\r\n *     <figcaption>Contained button</figcaption>\r\n *   </figure>\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { Button } from 'react-native-paper';\r\n *\r\n * const MyComponent = () => (\r\n *   <Button icon=\"add-a-photo\" mode=\"contained\" onPress={() => console.log('Pressed')}>\r\n *     Press me\r\n *   </Button>\r\n * );\r\n *\r\n * export default MyComponent;\r\n * ```\r\n */\r\nclass Button extends React.Component<Props, State> {\r\n  static defaultProps = {\r\n    mode: 'text',\r\n  };\r\n\r\n  state = {\r\n    elevation: new Animated.Value(this.props.mode === 'contained' ? 2 : 0),\r\n  };\r\n\r\n  _handlePressIn = () => {\r\n    if (this.props.mode === 'contained') {\r\n      Animated.timing(this.state.elevation, {\r\n        toValue: 8,\r\n        duration: 200,\r\n      }).start();\r\n    }\r\n  };\r\n\r\n  _handlePressOut = () => {\r\n    if (this.props.mode === 'contained') {\r\n      Animated.timing(this.state.elevation, {\r\n        toValue: 2,\r\n        duration: 150,\r\n      }).start();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      disabled,\r\n      compact,\r\n      mode,\r\n      dark,\r\n      loading,\r\n      icon,\r\n      color: buttonColor,\r\n      children,\r\n      accessibilityLabel,\r\n      onPress,\r\n      style,\r\n      theme,\r\n      ...rest\r\n    } = this.props;\r\n    const { colors, roundness } = theme;\r\n    const fontFamily = theme.fonts.medium;\r\n\r\n    let backgroundColor, borderColor, textColor, borderWidth;\r\n\r\n    if (mode === 'contained') {\r\n      if (disabled) {\r\n        backgroundColor = color(theme.dark ? white : black)\r\n          .alpha(0.12)\r\n          .rgb()\r\n          .string();\r\n      } else if (buttonColor) {\r\n        backgroundColor = buttonColor;\r\n      } else {\r\n        backgroundColor = colors.primary;\r\n      }\r\n    } else {\r\n      backgroundColor = 'transparent';\r\n    }\r\n\r\n    if (mode === 'outlined') {\r\n      borderColor = color(theme.dark ? white : black)\r\n        .alpha(0.29)\r\n        .rgb()\r\n        .string();\r\n      borderWidth = StyleSheet.hairlineWidth;\r\n    } else {\r\n      borderColor = 'transparent';\r\n      borderWidth = 0;\r\n    }\r\n\r\n    if (disabled) {\r\n      textColor = color(theme.dark ? white : black)\r\n        .alpha(0.32)\r\n        .rgb()\r\n        .string();\r\n    } else if (mode === 'contained') {\r\n      let isDark;\r\n\r\n      if (typeof dark === 'boolean') {\r\n        isDark = dark;\r\n      } else {\r\n        isDark =\r\n          backgroundColor === 'transparent'\r\n            ? false\r\n            : !color(backgroundColor).light();\r\n      }\r\n\r\n      textColor = isDark ? white : black;\r\n    } else if (buttonColor) {\r\n      textColor = buttonColor;\r\n    } else {\r\n      textColor = colors.primary;\r\n    }\r\n\r\n    const rippleColor = color(textColor)\r\n      .alpha(0.32)\r\n      .rgb()\r\n      .string();\r\n    const buttonStyle = {\r\n      backgroundColor,\r\n      borderColor,\r\n      borderWidth,\r\n      borderRadius: roundness,\r\n    };\r\n    const touchableStyle = { borderRadius: roundness };\r\n    const textStyle = { color: textColor, fontFamily };\r\n    const elevation = disabled ? 0 : this.state.elevation;\r\n\r\n    return (\r\n      <Surface\r\n        {...rest}\r\n        style={[\r\n          styles.button,\r\n          compact && styles.compact,\r\n          { elevation },\r\n          buttonStyle,\r\n          style,\r\n        ]}\r\n      >\r\n        <TouchableRipple\r\n          borderless\r\n          delayPressIn={0}\r\n          onPress={onPress}\r\n          onPressIn={this._handlePressIn}\r\n          onPressOut={this._handlePressOut}\r\n          accessibilityLabel={accessibilityLabel}\r\n          accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\r\n          accessibilityComponentType=\"button\"\r\n          accessibilityRole=\"button\"\r\n          accessibilityStates={disabled ? ['disabled'] : undefined}\r\n          disabled={disabled}\r\n          rippleColor={rippleColor}\r\n          style={touchableStyle}\r\n        >\r\n          <View style={styles.content}>\r\n            {icon && loading !== true ? (\r\n              <View style={styles.icon}>\r\n                <Icon source={icon} size={16} color={textColor} />\r\n              </View>\r\n            ) : null}\r\n            {loading ? (\r\n              <ActivityIndicator\r\n                size=\"small\"\r\n                color={textColor}\r\n                style={styles.icon}\r\n              />\r\n            ) : null}\r\n            <Text\r\n              numberOfLines={1}\r\n              style={[\r\n                styles.label,\r\n                compact && styles.compactLabel,\r\n                textStyle,\r\n                { fontFamily },\r\n              ]}\r\n            >\r\n              {React.Children.map(\r\n                children,\r\n                child =>\r\n                  typeof child === 'string' ? child.toUpperCase() : child\r\n              )}\r\n            </Text>\r\n          </View>\r\n        </TouchableRipple>\r\n      </Surface>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  button: {\r\n    minWidth: 64,\r\n    borderStyle: 'solid',\r\n  },\r\n  compact: {\r\n    minWidth: 'auto',\r\n  },\r\n  content: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  icon: {\r\n    width: 16,\r\n    marginLeft: 12,\r\n    marginRight: -4,\r\n  },\r\n  label: {\r\n    textAlign: 'center',\r\n    letterSpacing: 1,\r\n    marginVertical: 9,\r\n    marginHorizontal: 16,\r\n  },\r\n  compactLabel: {\r\n    marginHorizontal: 8,\r\n  },\r\n});\r\n\r\nexport default withTheme(Button);\r\n"]},"metadata":{},"sourceType":"module"}