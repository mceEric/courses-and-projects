{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"inset\", \"style\", \"theme\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport color from 'color';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { withTheme } from \"../core/theming\";\nimport { black, white } from \"../styles/colors\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar Divider = function (_React$Component) {\n  _inherits(Divider, _React$Component);\n\n  var _super = _createSuper(Divider);\n\n  function Divider() {\n    _classCallCheck(this, Divider);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Divider, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          inset = _this$props.inset,\n          style = _this$props.style,\n          theme = _this$props.theme,\n          rest = _objectWithoutProperties(_this$props, _excluded);\n\n      var isDarkTheme = theme.dark;\n      return _jsx(View, _objectSpread(_objectSpread({}, rest), {}, {\n        style: [isDarkTheme ? styles.dark : styles.light, inset && styles.inset, style]\n      }));\n    }\n  }]);\n\n  return Divider;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  light: {\n    backgroundColor: color(black).alpha(0.12).rgb().string(),\n    height: StyleSheet.hairlineWidth\n  },\n  dark: {\n    backgroundColor: color(white).alpha(0.12).rgb().string(),\n    height: StyleSheet.hairlineWidth\n  },\n  inset: {\n    marginLeft: 72\n  }\n});\nexport default withTheme(Divider);","map":{"version":3,"sources":["C:/projectpog/2022-ca326-travel-guide/MapDisplay/node_modules/react-native-paper/src/components/Divider.js"],"names":["React","color","withTheme","black","white","Divider","props","inset","style","theme","rest","isDarkTheme","dark","styles","light","Component","StyleSheet","create","backgroundColor","alpha","rgb","string","height","hairlineWidth","marginLeft"],"mappings":";;;;;;;;;;;;;;;;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,SAAT;AAEA,SAASC,KAAT,EAAgBC,KAAhB;;;IAmCMC,O;;;;;;;;;;;;;WACJ,kBAAS;AACP,wBAAyC,KAAKC,KAA9C;AAAA,UAAQC,KAAR,eAAQA,KAAR;AAAA,UAAeC,KAAf,eAAeA,KAAf;AAAA,UAAsBC,KAAtB,eAAsBA,KAAtB;AAAA,UAAgCC,IAAhC;;AACA,UAAcC,WAAd,GAA8BF,KAA9B,CAAQG,IAAR;AACA,aACE,KAAC,IAAD,kCACMF,IADN;AAEE,QAAA,KAAK,EAAE,CACLC,WAAW,GAAGE,MAAM,CAACD,IAAV,GAAiBC,MAAM,CAACC,KAD9B,EAELP,KAAK,IAAIM,MAAM,CAACN,KAFX,EAGLC,KAHK;AAFT,SADF;AAUD;;;;EAdmBR,KAAK,CAACe,S;;AAiB5B,IAAMF,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;AAC/BH,EAAAA,KAAK,EAAE;AACLI,IAAAA,eAAe,EAAEjB,KAAK,CAACE,KAAD,CAAL,CACdgB,KADc,CACR,IADQ,EAEdC,GAFc,GAGdC,MAHc,EADZ;AAKLC,IAAAA,MAAM,EAAEN,UAAU,CAACO;AALd,GADwB;AAQ/BX,EAAAA,IAAI,EAAE;AACJM,IAAAA,eAAe,EAAEjB,KAAK,CAACG,KAAD,CAAL,CACde,KADc,CACR,IADQ,EAEdC,GAFc,GAGdC,MAHc,EADb;AAKJC,IAAAA,MAAM,EAAEN,UAAU,CAACO;AALf,GARyB;AAe/BhB,EAAAA,KAAK,EAAE;AACLiB,IAAAA,UAAU,EAAE;AADP;AAfwB,CAAlB,CAAf;AAoBA,eAAetB,SAAS,CAACG,OAAD,CAAxB","sourcesContent":["/* @flow */\r\n\r\nimport * as React from 'react';\r\nimport color from 'color';\r\nimport { StyleSheet, View } from 'react-native';\r\nimport { withTheme } from '../core/theming';\r\nimport type { Theme } from '../types';\r\nimport { black, white } from '../styles/colors';\r\n\r\ntype Props = {\r\n  /**\r\n   *  Whether divider has a left inset.\r\n   */\r\n  inset?: boolean,\r\n  style?: any,\r\n  /**\r\n   * @optional\r\n   */\r\n  theme: Theme,\r\n};\r\n\r\n/**\r\n * A divider is a thin, lightweight separator that groups content in lists and page layouts.\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { View } from 'react-native';\r\n * import { Divider, Text } from 'react-native-paper';\r\n *\r\n * const MyComponent = () => (\r\n *   <View>\r\n *     <Text>Apple</Text>\r\n *     <Divider />\r\n *     <Text>Orange</Text>\r\n *     <Divider />\r\n *   </View>\r\n * );\r\n *\r\n * export default MyComponent;\r\n * ```\r\n */\r\nclass Divider extends React.Component<Props> {\r\n  render() {\r\n    const { inset, style, theme, ...rest } = this.props;\r\n    const { dark: isDarkTheme } = theme;\r\n    return (\r\n      <View\r\n        {...rest}\r\n        style={[\r\n          isDarkTheme ? styles.dark : styles.light,\r\n          inset && styles.inset,\r\n          style,\r\n        ]}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  light: {\r\n    backgroundColor: color(black)\r\n      .alpha(0.12)\r\n      .rgb()\r\n      .string(),\r\n    height: StyleSheet.hairlineWidth,\r\n  },\r\n  dark: {\r\n    backgroundColor: color(white)\r\n      .alpha(0.12)\r\n      .rgb()\r\n      .string(),\r\n    height: StyleSheet.hairlineWidth,\r\n  },\r\n  inset: {\r\n    marginLeft: 72,\r\n  },\r\n});\r\n\r\nexport default withTheme(Divider);\r\n"]},"metadata":{},"sourceType":"module"}