{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Button from \"./Button\";\nimport Text from \"./Typography/Text\";\nimport { withTheme } from \"../core/theming\";\nimport { white } from \"../styles/colors\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar DURATION_SHORT = 4000;\nvar DURATION_MEDIUM = 7000;\nvar DURATION_LONG = 10000;\n\nvar Snackbar = function (_React$Component) {\n  _inherits(Snackbar, _React$Component);\n\n  var _super = _createSuper(Snackbar);\n\n  function Snackbar() {\n    var _this;\n\n    _classCallCheck(this, Snackbar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      opacity: new Animated.Value(0.0),\n      hidden: !_this.props.visible\n    };\n\n    _this._toggle = function () {\n      if (_this.props.visible) {\n        _this._show();\n      } else {\n        _this._hide();\n      }\n    };\n\n    _this._show = function () {\n      clearTimeout(_this._hideTimeout);\n\n      _this.setState({\n        hidden: false\n      });\n\n      Animated.timing(_this.state.opacity, {\n        toValue: 1,\n        duration: 200,\n        useNativeDriver: true\n      }).start(function () {\n        var duration = _this.props.duration;\n        _this._hideTimeout = setTimeout(_this.props.onDismiss, duration);\n      });\n    };\n\n    _this._hide = function () {\n      clearTimeout(_this._hideTimeout);\n      Animated.timing(_this.state.opacity, {\n        toValue: 0,\n        duration: 100,\n        useNativeDriver: true\n      }).start(function () {\n        return _this.setState({\n          hidden: true\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Snackbar, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.visible !== this.props.visible) {\n        this._toggle();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearTimeout(this._hideTimeout);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          visible = _this$props.visible,\n          action = _this$props.action,\n          onDismiss = _this$props.onDismiss,\n          theme = _this$props.theme,\n          style = _this$props.style;\n      var colors = theme.colors,\n          roundness = theme.roundness;\n      return _jsx(SafeAreaView, {\n        pointerEvents: \"box-none\",\n        style: styles.wrapper,\n        children: _jsx(Animated.View, {\n          pointerEvents: \"box-none\",\n          accessibilityLiveRegion: \"polite\",\n          style: {\n            opacity: this.state.opacity,\n            transform: [{\n              scale: visible ? this.state.opacity.interpolate({\n                inputRange: [0, 1],\n                outputRange: [0.9, 1]\n              }) : 1\n            }]\n          },\n          children: !this.state.hidden ? _jsxs(View, {\n            pointerEvents: \"box-none\",\n            style: [styles.container, {\n              borderRadius: roundness\n            }, style],\n            children: [_jsx(Text, {\n              style: [styles.content, {\n                marginRight: action ? 0 : 16\n              }],\n              children: children\n            }), action ? _jsx(Button, {\n              onPress: function onPress() {\n                action.onPress();\n                onDismiss();\n              },\n              style: styles.button,\n              color: colors.accent,\n              compact: true,\n              mode: \"text\",\n              children: action.label.toUpperCase()\n            }) : null]\n          }) : null\n        })\n      });\n    }\n  }]);\n\n  return Snackbar;\n}(React.Component);\n\nSnackbar.DURATION_SHORT = DURATION_SHORT;\nSnackbar.DURATION_MEDIUM = DURATION_MEDIUM;\nSnackbar.DURATION_LONG = DURATION_LONG;\nSnackbar.defaultProps = {\n  duration: DURATION_MEDIUM\n};\nvar styles = StyleSheet.create({\n  wrapper: {\n    position: 'absolute',\n    bottom: 0,\n    width: '100%'\n  },\n  container: {\n    elevation: 6,\n    backgroundColor: '#323232',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    margin: 8,\n    borderRadius: 4\n  },\n  content: {\n    color: white,\n    marginLeft: 16,\n    marginVertical: 14,\n    flexWrap: 'wrap',\n    flex: 1\n  },\n  button: {\n    marginHorizontal: 8,\n    marginVertical: 6\n  }\n});\nexport default withTheme(Snackbar);","map":{"version":3,"sources":["C:/projectpog/2022-ca326-travel-guide/MapDisplay/node_modules/react-native-paper/src/components/Snackbar.js"],"names":["React","Button","Text","withTheme","white","DURATION_SHORT","DURATION_MEDIUM","DURATION_LONG","Snackbar","state","opacity","Animated","Value","hidden","props","visible","_toggle","_show","_hide","clearTimeout","_hideTimeout","setState","timing","toValue","duration","useNativeDriver","start","setTimeout","onDismiss","prevProps","children","action","theme","style","colors","roundness","styles","wrapper","transform","scale","interpolate","inputRange","outputRange","container","borderRadius","content","marginRight","onPress","button","accent","label","toUpperCase","Component","defaultProps","StyleSheet","create","position","bottom","width","elevation","backgroundColor","flexDirection","justifyContent","alignItems","margin","color","marginLeft","marginVertical","flexWrap","flex","marginHorizontal"],"mappings":"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","sourcesContent":["/* @flow */\r\n\r\nimport * as React from 'react';\r\nimport { StyleSheet, Animated, View, SafeAreaView } from 'react-native';\r\n\r\nimport Button from './Button';\r\nimport Text from './Typography/Text';\r\nimport { withTheme } from '../core/theming';\r\nimport { white } from '../styles/colors';\r\nimport type { Theme } from '../types';\r\n\r\ntype Props = {\r\n  /**\r\n   * Whether the Snackbar is currently visible.\r\n   */\r\n  visible: boolean,\r\n  /**\r\n   * Label and press callback for the action button. It should contain the following properties:\r\n   * - `label` - Label of the action button\r\n   * - `onPress` - Callback that is called when action button is pressed.\r\n   */\r\n  action?: {\r\n    label: string,\r\n    onPress: () => mixed,\r\n  },\r\n  /**\r\n   * The duration for which the Snackbar is shown.\r\n   */\r\n  duration?: number,\r\n  /**\r\n   * Callback called when Snackbar is dismissed. The `visible` prop needs to be updated when this is called.\r\n   */\r\n  onDismiss: () => mixed,\r\n  /**\r\n   * Text content of the Snackbar.\r\n   */\r\n  children: React.Node,\r\n  style?: any,\r\n  /**\r\n   * @optional\r\n   */\r\n  theme: Theme,\r\n};\r\n\r\ntype State = {\r\n  opacity: Animated.Value,\r\n  hidden: boolean,\r\n};\r\n\r\nconst DURATION_SHORT = 4000;\r\nconst DURATION_MEDIUM = 7000;\r\nconst DURATION_LONG = 10000;\r\n\r\n/**\r\n * Snackbars provide brief feedback about an operation through a message at the bottom of the screen.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <img class=\"medium\" src=\"screenshots/snackbar.gif\" />\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { StyleSheet } from 'react-native';\r\n * import { Snackbar } from 'react-native-paper';\r\n *\r\n * export default class MyComponent extends React.Component {\r\n *   state = {\r\n *     visible: false,\r\n *   };\r\n *\r\n *   render() {\r\n *     const { visible } = this.state;\r\n *     return (\r\n *       <View style={styles.container}>\r\n *         <Button\r\n *           onPress={() => this.setState(state => ({ visible: !state.visible }))}\r\n *         >\r\n *           {this.state.visible ? 'Hide' : 'Show'}\r\n *         </Button>\r\n *         <Snackbar\r\n *           visible={this.state.visible}\r\n *           onDismiss={() => this.setState({ visible: false })}\r\n *           action={{\r\n *             label: 'Undo',\r\n *             onPress: () => {\r\n *               // Do something\r\n *             },\r\n *           }}\r\n *         >\r\n *           Hey there! I'm a Snackbar.\r\n *         </Snackbar>\r\n *       </View>\r\n *     );\r\n *   }\r\n * }\r\n *\r\n * const styles = StyleSheet.create({\r\n *   container: {\r\n *     flex: 1,\r\n *     justifyContent: 'space-between',\r\n *   },\r\n * });\r\n * ```\r\n */\r\nclass Snackbar extends React.Component<Props, State> {\r\n  /**\r\n   * Show the Snackbar for a short duration.\r\n   */\r\n  static DURATION_SHORT = DURATION_SHORT;\r\n\r\n  /**\r\n   * Show the Snackbar for a medium duration.\r\n   */\r\n  static DURATION_MEDIUM = DURATION_MEDIUM;\r\n\r\n  /**\r\n   * Show the Snackbar for a long duration.\r\n   */\r\n  static DURATION_LONG = DURATION_LONG;\r\n\r\n  static defaultProps = {\r\n    duration: DURATION_MEDIUM,\r\n  };\r\n\r\n  state = {\r\n    opacity: new Animated.Value(0.0),\r\n    hidden: !this.props.visible,\r\n  };\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.visible !== this.props.visible) {\r\n      this._toggle();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearTimeout(this._hideTimeout);\r\n  }\r\n\r\n  _toggle = () => {\r\n    if (this.props.visible) {\r\n      this._show();\r\n    } else {\r\n      this._hide();\r\n    }\r\n  };\r\n\r\n  _show = () => {\r\n    clearTimeout(this._hideTimeout);\r\n    this.setState({\r\n      hidden: false,\r\n    });\r\n    Animated.timing(this.state.opacity, {\r\n      toValue: 1,\r\n      duration: 200,\r\n      useNativeDriver: true,\r\n    }).start(() => {\r\n      const { duration } = this.props;\r\n      this._hideTimeout = setTimeout(this.props.onDismiss, duration);\r\n    });\r\n  };\r\n\r\n  _hide = () => {\r\n    clearTimeout(this._hideTimeout);\r\n\r\n    Animated.timing(this.state.opacity, {\r\n      toValue: 0,\r\n      duration: 100,\r\n      useNativeDriver: true,\r\n    }).start(() => this.setState({ hidden: true }));\r\n  };\r\n\r\n  _hideTimeout: TimeoutID;\r\n\r\n  render() {\r\n    const { children, visible, action, onDismiss, theme, style } = this.props;\r\n    const { colors, roundness } = theme;\r\n    return (\r\n      <SafeAreaView pointerEvents=\"box-none\" style={styles.wrapper}>\r\n        <Animated.View\r\n          pointerEvents=\"box-none\"\r\n          accessibilityLiveRegion=\"polite\"\r\n          style={{\r\n            opacity: this.state.opacity,\r\n            transform: [\r\n              {\r\n                scale: visible\r\n                  ? this.state.opacity.interpolate({\r\n                      inputRange: [0, 1],\r\n                      outputRange: [0.9, 1],\r\n                    })\r\n                  : 1,\r\n              },\r\n            ],\r\n          }}\r\n        >\r\n          {!this.state.hidden ? (\r\n            <View\r\n              pointerEvents=\"box-none\"\r\n              style={[styles.container, { borderRadius: roundness }, style]}\r\n            >\r\n              <Text style={[styles.content, { marginRight: action ? 0 : 16 }]}>\r\n                {children}\r\n              </Text>\r\n              {action ? (\r\n                <Button\r\n                  onPress={() => {\r\n                    action.onPress();\r\n                    onDismiss();\r\n                  }}\r\n                  style={styles.button}\r\n                  color={colors.accent}\r\n                  compact\r\n                  mode=\"text\"\r\n                >\r\n                  {action.label.toUpperCase()}\r\n                </Button>\r\n              ) : null}\r\n            </View>\r\n          ) : null}\r\n        </Animated.View>\r\n      </SafeAreaView>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  wrapper: {\r\n    position: 'absolute',\r\n    bottom: 0,\r\n    width: '100%',\r\n  },\r\n  container: {\r\n    elevation: 6,\r\n    backgroundColor: '#323232',\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    margin: 8,\r\n    borderRadius: 4,\r\n  },\r\n  content: {\r\n    color: white,\r\n    marginLeft: 16,\r\n    marginVertical: 14,\r\n    flexWrap: 'wrap',\r\n    flex: 1,\r\n  },\r\n  button: {\r\n    marginHorizontal: 8,\r\n    marginVertical: 6,\r\n  },\r\n});\r\n\r\nexport default withTheme(Snackbar);\r\n"]},"metadata":{},"sourceType":"module"}